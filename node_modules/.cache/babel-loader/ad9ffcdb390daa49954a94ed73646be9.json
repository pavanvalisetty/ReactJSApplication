{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2, b as _createForOfIteratorHelperLoose } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useMemo, useEffect, useCallback } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport { warning } from 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport { isSelfTarget } from 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport { hasFocusWithin } from 'reakit-utils/hasFocusWithin';\nimport { isPortalEvent } from 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport { useClickable } from '../Clickable/Clickable.js';\nimport { createOnKeyDown } from 'reakit-utils/createOnKeyDown';\nimport { getDocument } from 'reakit-utils/getDocument';\nimport { g as getCurrentId } from '../getCurrentId-5aa9849e.js';\nimport { b as COMPOSITE_ITEM_KEYS } from '../__keys-6b7fda7f.js';\nimport '../Id/IdProvider.js';\nimport { unstable_useId } from '../Id/Id.js';\nimport { isTextField } from 'reakit-utils/isTextField';\nimport { ensureFocus } from 'reakit-utils/ensureFocus';\nimport { s as setTextFieldValue } from '../setTextFieldValue-78ab5d56.js';\n\nfunction getWidget(itemElement) {\n  return itemElement.querySelector(\"[data-composite-item-widget]\");\n}\n\nfunction useItem(options) {\n  return useMemo(function () {\n    var _options$items;\n\n    return (_options$items = options.items) === null || _options$items === void 0 ? void 0 : _options$items.find(function (item) {\n      return options.id && item.id === options.id;\n    });\n  }, [options.items, options.id]);\n}\n\nfunction targetIsAnotherItem(event, items) {\n  if (isSelfTarget(event)) return false;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(items), _step; !(_step = _iterator()).done;) {\n    var item = _step.value;\n\n    if (item.ref.current === event.target) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar useCompositeItem = createHook({\n  name: \"CompositeItem\",\n  compose: [useClickable, unstable_useId],\n  keys: COMPOSITE_ITEM_KEYS,\n  propsAreEqual: function propsAreEqual(prev, next) {\n    if (!next.id || prev.id !== next.id) {\n      return useClickable.unstable_propsAreEqual(prev, next);\n    }\n\n    var prevCurrentId = prev.currentId,\n        prevMoves = prev.unstable_moves,\n        prevProps = _objectWithoutPropertiesLoose(prev, [\"currentId\", \"unstable_moves\"]);\n\n    var nextCurrentId = next.currentId,\n        nextMoves = next.unstable_moves,\n        nextProps = _objectWithoutPropertiesLoose(next, [\"currentId\", \"unstable_moves\"]);\n\n    if (nextCurrentId !== prevCurrentId) {\n      if (next.id === nextCurrentId || next.id === prevCurrentId) {\n        return false;\n      }\n    } else if (prevMoves !== nextMoves) {\n      return false;\n    }\n\n    return useClickable.unstable_propsAreEqual(prevProps, nextProps);\n  },\n  useOptions: function useOptions(options) {\n    return _objectSpread2(_objectSpread2({}, options), {}, {\n      id: options.id,\n      currentId: getCurrentId(options),\n      unstable_clickOnSpace: options.unstable_hasActiveWidget ? false : options.unstable_clickOnSpace\n    });\n  },\n  useProps: function useProps(options, _ref) {\n    var _options$items2;\n\n    var htmlRef = _ref.ref,\n        _ref$tabIndex = _ref.tabIndex,\n        htmlTabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,\n        htmlOnFocus = _ref.onFocus,\n        htmlOnBlur = _ref.onBlur,\n        htmlOnKeyDown = _ref.onKeyDown,\n        htmlOnClick = _ref.onClick,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"ref\", \"tabIndex\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onClick\"]);\n\n    var ref = useRef(null);\n    var id = options.id;\n    var trulyDisabled = options.disabled && !options.focusable;\n    var isCurrentItem = options.currentId === id;\n    var isCurrentItemRef = useLiveRef(isCurrentItem);\n    var hasFocusedComposite = useRef(false);\n    var item = useItem(options);\n    var onFocusRef = useLiveRef(htmlOnFocus);\n    var onBlurRef = useLiveRef(htmlOnBlur);\n    var onKeyDownRef = useLiveRef(htmlOnKeyDown);\n    var onClickRef = useLiveRef(htmlOnClick);\n    var shouldTabIndex = !options.unstable_virtual && !options.unstable_hasActiveWidget && isCurrentItem || // We don't want to set tabIndex=\"-1\" when using CompositeItem as a\n    // standalone component, without state props.\n    !((_options$items2 = options.items) === null || _options$items2 === void 0 ? void 0 : _options$items2.length);\n    useEffect(function () {\n      var _options$registerItem;\n\n      if (!id) return undefined;\n      (_options$registerItem = options.registerItem) === null || _options$registerItem === void 0 ? void 0 : _options$registerItem.call(options, {\n        id: id,\n        ref: ref,\n        disabled: !!trulyDisabled\n      });\n      return function () {\n        var _options$unregisterIt;\n\n        (_options$unregisterIt = options.unregisterItem) === null || _options$unregisterIt === void 0 ? void 0 : _options$unregisterIt.call(options, id);\n      };\n    }, [id, trulyDisabled, options.registerItem, options.unregisterItem]);\n    useEffect(function () {\n      var element = ref.current;\n\n      if (!element) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't focus composite item component because `ref` wasn't passed to component.\", \"See https://reakit.io/docs/composite\") : void 0;\n        return;\n      } // `moves` will be incremented whenever next, previous, up, down, first,\n      // last or move have been called. This means that the composite item will\n      // be focused whenever some of these functions are called. We're using\n      // isCurrentItemRef instead of isCurrentItem because we don't want to\n      // focus the item if isCurrentItem changes (and options.moves doesn't).\n\n\n      if (options.unstable_moves && isCurrentItemRef.current) {\n        element.focus();\n      }\n    }, [options.unstable_moves]);\n    var onFocus = useCallback(function (event) {\n      var _onFocusRef$current, _options$setCurrentId;\n\n      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);\n      if (event.defaultPrevented) return;\n      if (isPortalEvent(event)) return;\n      if (!id) return;\n      if (targetIsAnotherItem(event, options.items)) return;\n      (_options$setCurrentId = options.setCurrentId) === null || _options$setCurrentId === void 0 ? void 0 : _options$setCurrentId.call(options, id); // When using aria-activedescendant, we want to make sure that the\n      // composite container receives focus, not the composite item.\n      // But we don't want to do this if the target is another focusable\n      // element inside the composite item, such as CompositeItemWidget.\n\n      if (options.unstable_virtual && options.baseId && isSelfTarget(event)) {\n        var target = event.target;\n        var composite = getDocument(target).getElementById(options.baseId);\n\n        if (composite) {\n          hasFocusedComposite.current = true;\n          ensureFocus(composite);\n        }\n      }\n    }, [id, options.items, options.setCurrentId, options.unstable_virtual, options.baseId]);\n    var onBlur = useCallback(function (event) {\n      var _onBlurRef$current;\n\n      if (options.unstable_virtual && hasFocusedComposite.current) {\n        // When hasFocusedComposite is true, composite has been focused right\n        // after focusing this item. This is an intermediate blur event, so\n        // we ignore it.\n        hasFocusedComposite.current = false;\n        event.preventDefault();\n        event.stopPropagation();\n        return;\n      }\n\n      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);\n    }, [options.unstable_virtual]);\n    var onCharacterKeyDown = useCallback(function (event) {\n      var _onKeyDownRef$current;\n\n      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);\n      if (!isSelfTarget(event)) return;\n\n      if (event.key.length === 1 && event.key !== \" \") {\n        var widget = getWidget(event.currentTarget);\n\n        if (widget && isTextField(widget)) {\n          widget.focus();\n          var key = event.key; // Using RAF here because otherwise the key will be added twice to\n          // the input when using roving tabindex\n\n          window.requestAnimationFrame(function () {\n            setTextFieldValue(widget, key);\n          });\n        }\n      }\n    }, []);\n    var onKeyDown = useMemo(function () {\n      return createOnKeyDown({\n        onKeyDown: onCharacterKeyDown,\n        stopPropagation: true,\n        // We don't want to listen to focusable elements inside the composite\n        // item, such as a CompositeItemWidget.\n        shouldKeyDown: isSelfTarget,\n        keyMap: function keyMap() {\n          // `options.orientation` can also be undefined, which means that\n          // both `isVertical` and `isHorizontal` will be `true`.\n          var isVertical = options.orientation !== \"horizontal\";\n          var isHorizontal = options.orientation !== \"vertical\";\n          var isGrid = !!(item === null || item === void 0 ? void 0 : item.groupId);\n\n          var Delete = function Delete(event) {\n            var widget = getWidget(event.currentTarget);\n\n            if (widget && isTextField(widget)) {\n              setTextFieldValue(widget, \"\");\n            }\n          };\n\n          var up = options.up && function () {\n            return options.up();\n          };\n\n          var next = options.next && function () {\n            return options.next();\n          };\n\n          var down = options.down && function () {\n            return options.down();\n          };\n\n          var previous = options.previous && function () {\n            return options.previous();\n          };\n\n          return {\n            Delete: Delete,\n            Backspace: Delete,\n            ArrowUp: (isGrid || isVertical) && up,\n            ArrowRight: (isGrid || isHorizontal) && next,\n            ArrowDown: (isGrid || isVertical) && down,\n            ArrowLeft: (isGrid || isHorizontal) && previous,\n            Home: function Home(event) {\n              if (!isGrid || event.ctrlKey) {\n                var _options$first;\n\n                (_options$first = options.first) === null || _options$first === void 0 ? void 0 : _options$first.call(options);\n              } else {\n                var _options$previous;\n\n                (_options$previous = options.previous) === null || _options$previous === void 0 ? void 0 : _options$previous.call(options, true);\n              }\n            },\n            End: function End(event) {\n              if (!isGrid || event.ctrlKey) {\n                var _options$last;\n\n                (_options$last = options.last) === null || _options$last === void 0 ? void 0 : _options$last.call(options);\n              } else {\n                var _options$next;\n\n                (_options$next = options.next) === null || _options$next === void 0 ? void 0 : _options$next.call(options, true);\n              }\n            },\n            PageUp: function PageUp() {\n              if (isGrid) {\n                var _options$up;\n\n                (_options$up = options.up) === null || _options$up === void 0 ? void 0 : _options$up.call(options, true);\n              } else {\n                var _options$first2;\n\n                (_options$first2 = options.first) === null || _options$first2 === void 0 ? void 0 : _options$first2.call(options);\n              }\n            },\n            PageDown: function PageDown() {\n              if (isGrid) {\n                var _options$down;\n\n                (_options$down = options.down) === null || _options$down === void 0 ? void 0 : _options$down.call(options, true);\n              } else {\n                var _options$last2;\n\n                (_options$last2 = options.last) === null || _options$last2 === void 0 ? void 0 : _options$last2.call(options);\n              }\n            }\n          };\n        }\n      });\n    }, [onCharacterKeyDown, options.orientation, item, options.up, options.next, options.down, options.previous, options.first, options.last]);\n    var onClick = useCallback(function (event) {\n      var _onClickRef$current;\n\n      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);\n      if (event.defaultPrevented) return;\n      var element = event.currentTarget;\n      var widget = getWidget(element);\n\n      if (widget && !hasFocusWithin(widget)) {\n        // If there's a widget inside the composite item, we make sure it's\n        // focused when pressing enter, space or clicking on the composite item.\n        widget.focus();\n      }\n    }, []);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      id: id,\n      tabIndex: shouldTabIndex ? htmlTabIndex : -1,\n      \"aria-selected\": options.unstable_virtual && isCurrentItem ? true : undefined,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onKeyDown: onKeyDown,\n      onClick: onClick\n    }, htmlProps);\n  }\n});\nvar CompositeItem = createComponent({\n  as: \"button\",\n  memo: true,\n  useHook: useCompositeItem\n});\nexport { CompositeItem, useCompositeItem };","map":null,"metadata":{},"sourceType":"module"}