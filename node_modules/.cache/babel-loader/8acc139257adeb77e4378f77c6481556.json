{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport 'reakit-utils/shallowEqual';\nimport { useState, useRef, useCallback, useEffect } from 'react';\nimport 'reakit-utils/useIsomorphicEffect';\nimport { useSealedState } from 'reakit-utils/useSealedState';\nimport '../Id/IdProvider.js';\nimport '../Id/IdState.js';\nimport '../Disclosure/DisclosureState.js';\nimport '../Dialog/DialogState.js';\nimport '@popperjs/core';\nimport { usePopoverState } from '../Popover/PopoverState.js';\nimport { g as globalState } from '../__globalState-300469f0.js';\n\nfunction useTooltipState(initialState) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var _useSealedState = useSealedState(initialState),\n      _useSealedState$place = _useSealedState.placement,\n      placement = _useSealedState$place === void 0 ? \"top\" : _useSealedState$place,\n      _useSealedState$unsta = _useSealedState.unstable_timeout,\n      initialTimeout = _useSealedState$unsta === void 0 ? 0 : _useSealedState$unsta,\n      sealed = _objectWithoutPropertiesLoose(_useSealedState, [\"placement\", \"unstable_timeout\"]);\n\n  var _React$useState = useState(initialTimeout),\n      timeout = _React$useState[0],\n      setTimeout = _React$useState[1];\n\n  var showTimeout = useRef(null);\n  var hideTimeout = useRef(null);\n\n  var _usePopoverState = usePopoverState(_objectSpread2(_objectSpread2({}, sealed), {}, {\n    placement: placement\n  })),\n      modal = _usePopoverState.modal,\n      setModal = _usePopoverState.setModal,\n      popover = _objectWithoutPropertiesLoose(_usePopoverState, [\"modal\", \"setModal\"]);\n\n  var clearTimeouts = useCallback(function () {\n    if (showTimeout.current !== null) {\n      window.clearTimeout(showTimeout.current);\n    }\n\n    if (hideTimeout.current !== null) {\n      window.clearTimeout(hideTimeout.current);\n    }\n  }, []);\n  var hide = useCallback(function () {\n    clearTimeouts();\n    popover.hide(); // Let's give some time so people can move from a reference to another\n    // and still show tooltips immediately\n\n    hideTimeout.current = window.setTimeout(function () {\n      globalState.hide(popover.baseId);\n    }, timeout);\n  }, [clearTimeouts, popover.hide, timeout, popover.baseId]);\n  var show = useCallback(function () {\n    clearTimeouts();\n\n    if (!timeout || globalState.currentTooltipId) {\n      // If there's no timeout or a tooltip visible already, we can show this\n      // immediately\n      globalState.show(popover.baseId);\n      popover.show();\n    } else {\n      // There may be a reference with focus whose tooltip is still not visible\n      // In this case, we want to update it before it gets shown.\n      globalState.show(null); // Otherwise, wait a little bit to show the tooltip\n\n      showTimeout.current = window.setTimeout(function () {\n        globalState.show(popover.baseId);\n        popover.show();\n      }, timeout);\n    }\n  }, [clearTimeouts, timeout, popover.show, popover.baseId]);\n  useEffect(function () {\n    return globalState.subscribe(function (id) {\n      if (id !== popover.baseId) {\n        clearTimeouts();\n\n        if (popover.visible) {\n          // Make sure there will be only one tooltip visible\n          popover.hide();\n        }\n      }\n    });\n  }, [popover.baseId, clearTimeouts, popover.visible, popover.hide]);\n  useEffect(function () {\n    return function () {\n      clearTimeouts();\n      globalState.hide(popover.baseId);\n    };\n  }, [clearTimeouts, popover.baseId]);\n  return _objectSpread2(_objectSpread2({}, popover), {}, {\n    hide: hide,\n    show: show,\n    unstable_timeout: timeout,\n    unstable_setTimeout: setTimeout\n  });\n}\n\nexport { useTooltipState };","map":null,"metadata":{},"sourceType":"module"}