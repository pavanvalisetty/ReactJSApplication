{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2, b as _createForOfIteratorHelperLoose } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useEffect, useCallback, useMemo } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport { warning } from 'reakit-warning';\nimport 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport { hasFocusWithin } from 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport { useClickable } from '../Clickable/Clickable.js';\nimport { createOnKeyDown } from 'reakit-utils/createOnKeyDown';\nimport '../Id/IdProvider.js';\nimport { unstable_useId } from '../Id/Id.js'; // Automatically generated\n\nvar ROVER_STATE_KEYS = [\"baseId\", \"unstable_idCountRef\", \"orientation\", \"stops\", \"currentId\", \"unstable_pastId\", \"unstable_moves\", \"loop\", \"setBaseId\", \"register\", \"unregister\", \"move\", \"next\", \"previous\", \"first\", \"last\", \"unstable_reset\", \"unstable_orientate\"];\nvar ROVER_KEYS = [].concat(ROVER_STATE_KEYS, [\"stopId\"]);\n\nfunction useAllCallbacks() {\n  for (var _len = arguments.length, callbacks = new Array(_len), _key = 0; _key < _len; _key++) {\n    callbacks[_key] = arguments[_key];\n  }\n\n  return useCallback(function () {\n    var fns = callbacks.filter(Boolean);\n\n    for (var _iterator = _createForOfIteratorHelperLoose(fns), _step; !(_step = _iterator()).done;) {\n      var callback = _step.value;\n      callback.apply(void 0, arguments);\n    }\n  }, callbacks);\n}\n\nvar useRover = createHook({\n  name: \"Rover\",\n  compose: [useClickable, unstable_useId],\n  keys: ROVER_KEYS,\n  useProps: function useProps(options, _ref) {\n    var htmlRef = _ref.ref,\n        _ref$tabIndex = _ref.tabIndex,\n        htmlTabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,\n        htmlOnFocus = _ref.onFocus,\n        htmlOnKeyDown = _ref.onKeyDown,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"ref\", \"tabIndex\", \"onFocus\", \"onKeyDown\"]);\n\n    var ref = useRef(null);\n    var id = options.stopId || options.id;\n    var trulyDisabled = options.disabled && !options.focusable;\n    var noFocused = options.currentId == null;\n    var focused = options.currentId === id;\n    var isFirst = (options.stops || [])[0] && options.stops[0].id === id;\n    var shouldTabIndex = focused || isFirst && noFocused;\n    useEffect(function () {\n      if (trulyDisabled || !id) return undefined;\n      options.register && options.register(id, ref);\n      return function () {\n        return options.unregister && options.unregister(id);\n      };\n    }, [id, trulyDisabled, options.register, options.unregister]);\n    useEffect(function () {\n      var rover = ref.current;\n\n      if (!rover) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't focus rover component because `ref` wasn't passed to component.\", \"See https://reakit.io/docs/rover\") : void 0;\n        return;\n      }\n\n      if (options.unstable_moves && focused && !hasFocusWithin(rover)) {\n        rover.focus();\n      }\n    }, [focused, options.unstable_moves]);\n    var onFocus = useCallback(function (event) {\n      if (!id || !event.currentTarget.contains(event.target)) return; // this is already focused, so we move silently\n\n      options.move(id, true);\n    }, [options.move, id]);\n    var onKeyDown = useMemo(function () {\n      return createOnKeyDown({\n        onKeyDown: htmlOnKeyDown,\n        stopPropagation: true,\n        shouldKeyDown: function shouldKeyDown(event) {\n          return (// Ignore portals\n            // https://github.com/facebook/react/issues/11387\n            event.currentTarget.contains(event.target)\n          );\n        },\n        keyMap: {\n          ArrowUp: options.orientation !== \"horizontal\" && options.previous,\n          ArrowRight: options.orientation !== \"vertical\" && options.next,\n          ArrowDown: options.orientation !== \"horizontal\" && options.next,\n          ArrowLeft: options.orientation !== \"vertical\" && options.previous,\n          Home: options.first,\n          End: options.last,\n          PageUp: options.first,\n          PageDown: options.last\n        }\n      });\n    }, [htmlOnKeyDown, options.orientation, options.previous, options.next, options.first, options.last]);\n    return _objectSpread2({\n      id: id,\n      ref: useForkRef(ref, htmlRef),\n      tabIndex: shouldTabIndex ? htmlTabIndex : -1,\n      onFocus: useAllCallbacks(onFocus, htmlOnFocus),\n      onKeyDown: onKeyDown\n    }, htmlProps);\n  }\n});\nvar Rover = createComponent({\n  as: \"button\",\n  useHook: useRover\n});\nexport { Rover, useRover };","map":null,"metadata":{},"sourceType":"module"}