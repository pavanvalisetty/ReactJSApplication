{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useState, useEffect } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport { isButton } from 'reakit-utils/isButton';\nimport { warning } from 'reakit-warning';\nimport 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport { useClickable } from '../Clickable/Clickable.js'; // Automatically generated\n\nvar BUTTON_KEYS = [];\nvar useButton = createHook({\n  name: \"Button\",\n  compose: useClickable,\n  keys: BUTTON_KEYS,\n  useProps: function useProps(_, _ref) {\n    var htmlRef = _ref.ref,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"ref\"]);\n\n    var ref = useRef(null);\n\n    var _React$useState = useState(undefined),\n        role = _React$useState[0],\n        setRole = _React$useState[1];\n\n    var _React$useState2 = useState(\"button\"),\n        type = _React$useState2[0],\n        setType = _React$useState2[1];\n\n    useEffect(function () {\n      var element = ref.current;\n\n      if (!element) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't determine whether the element is a native button because `ref` wasn't passed to the component\", \"See https://reakit.io/docs/button\") : void 0;\n        return;\n      }\n\n      if (!isButton(element)) {\n        if (element.tagName !== \"A\") {\n          setRole(\"button\");\n        }\n\n        setType(undefined);\n      }\n    }, []);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      role: role,\n      type: type\n    }, htmlProps);\n  }\n});\nvar Button = createComponent({\n  as: \"button\",\n  memo: true,\n  useHook: useButton\n});\nexport { Button, useButton };","map":null,"metadata":{},"sourceType":"module"}