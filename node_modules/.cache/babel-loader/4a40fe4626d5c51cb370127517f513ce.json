{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useState, useEffect, useCallback } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport '../Clickable/Clickable.js';\nimport { createEvent } from 'reakit-utils/createEvent';\nimport 'reakit-utils/createOnKeyDown';\nimport 'reakit-utils/getDocument';\nimport '../getCurrentId-5aa9849e.js';\nimport '../__keys-6b7fda7f.js';\nimport '../Id/IdProvider.js';\nimport '../Id/Id.js';\nimport 'reakit-utils/isTextField';\nimport 'reakit-utils/ensureFocus';\nimport '../setTextFieldValue-78ab5d56.js';\nimport { useCompositeItem } from '../Composite/CompositeItem.js';\nimport { warning } from 'reakit-warning/warning';\nimport { R as RADIO_KEYS } from '../__keys-018f251c.js';\n\nfunction getChecked(options) {\n  if (typeof options.checked !== \"undefined\") {\n    return options.checked;\n  }\n\n  return typeof options.value !== \"undefined\" && options.state === options.value;\n}\n\nfunction useInitialChecked(options) {\n  var _React$useState = useState(function () {\n    return getChecked(options);\n  }),\n      initialChecked = _React$useState[0];\n\n  var _React$useState2 = useState(options.currentId),\n      initialCurrentId = _React$useState2[0];\n\n  var id = options.id,\n      setCurrentId = options.setCurrentId;\n  useEffect(function () {\n    if (initialChecked && id && initialCurrentId !== id) {\n      setCurrentId === null || setCurrentId === void 0 ? void 0 : setCurrentId(id);\n    }\n  }, [initialChecked, id, setCurrentId, initialCurrentId]);\n}\n\nfunction fireChange(element, onChange) {\n  var event = createEvent(element, \"change\");\n  Object.defineProperties(event, {\n    type: {\n      value: \"change\"\n    },\n    target: {\n      value: element\n    },\n    currentTarget: {\n      value: element\n    }\n  });\n  onChange === null || onChange === void 0 ? void 0 : onChange(event);\n}\n\nvar useRadio = createHook({\n  name: \"Radio\",\n  compose: useCompositeItem,\n  keys: RADIO_KEYS,\n  useOptions: function useOptions(_ref, _ref2) {\n    var _options$value;\n\n    var value = _ref2.value,\n        checked = _ref2.checked;\n\n    var _ref$unstable_clickOn = _ref.unstable_clickOnEnter,\n        unstable_clickOnEnter = _ref$unstable_clickOn === void 0 ? false : _ref$unstable_clickOn,\n        _ref$unstable_checkOn = _ref.unstable_checkOnFocus,\n        unstable_checkOnFocus = _ref$unstable_checkOn === void 0 ? true : _ref$unstable_checkOn,\n        options = _objectWithoutPropertiesLoose(_ref, [\"unstable_clickOnEnter\", \"unstable_checkOnFocus\"]);\n\n    return _objectSpread2(_objectSpread2({\n      checked: checked,\n      unstable_clickOnEnter: unstable_clickOnEnter,\n      unstable_checkOnFocus: unstable_checkOnFocus\n    }, options), {}, {\n      value: (_options$value = options.value) != null ? _options$value : value\n    });\n  },\n  useProps: function useProps(options, _ref3) {\n    var htmlRef = _ref3.ref,\n        htmlOnChange = _ref3.onChange,\n        htmlOnClick = _ref3.onClick,\n        htmlProps = _objectWithoutPropertiesLoose(_ref3, [\"ref\", \"onChange\", \"onClick\"]);\n\n    var ref = useRef(null);\n\n    var _React$useState3 = useState(true),\n        isNativeRadio = _React$useState3[0],\n        setIsNativeRadio = _React$useState3[1];\n\n    var checked = getChecked(options);\n    var isCurrentItemRef = useLiveRef(options.currentId === options.id);\n    var onChangeRef = useLiveRef(htmlOnChange);\n    var onClickRef = useLiveRef(htmlOnClick);\n    useInitialChecked(options);\n    useEffect(function () {\n      var element = ref.current;\n\n      if (!element) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't determine whether the element is a native radio because `ref` wasn't passed to the component\", \"See https://reakit.io/docs/radio\") : void 0;\n        return;\n      }\n\n      if (element.tagName !== \"INPUT\" || element.type !== \"radio\") {\n        setIsNativeRadio(false);\n      }\n    }, []);\n    var onChange = useCallback(function (event) {\n      var _onChangeRef$current, _options$setState;\n\n      (_onChangeRef$current = onChangeRef.current) === null || _onChangeRef$current === void 0 ? void 0 : _onChangeRef$current.call(onChangeRef, event);\n      if (event.defaultPrevented) return;\n      if (options.disabled) return;\n      (_options$setState = options.setState) === null || _options$setState === void 0 ? void 0 : _options$setState.call(options, options.value);\n    }, [options.disabled, options.setState, options.value]);\n    var onClick = useCallback(function (event) {\n      var _onClickRef$current;\n\n      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);\n      if (event.defaultPrevented) return;\n      fireChange(event.currentTarget, onChange);\n    }, [onChange]);\n    useEffect(function () {\n      var element = ref.current;\n      if (!element) return;\n\n      if (options.unstable_moves && isCurrentItemRef.current && options.unstable_checkOnFocus) {\n        fireChange(element, onChange);\n      }\n    }, [options.unstable_moves, options.unstable_checkOnFocus, onChange]);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      role: !isNativeRadio ? \"radio\" : undefined,\n      type: isNativeRadio ? \"radio\" : undefined,\n      value: isNativeRadio ? options.value : undefined,\n      name: isNativeRadio ? options.baseId : undefined,\n      \"aria-checked\": checked,\n      checked: checked,\n      onChange: onChange,\n      onClick: onClick\n    }, htmlProps);\n  }\n});\nvar Radio = createComponent({\n  as: \"input\",\n  memo: true,\n  useHook: useRadio\n});\nexport { Radio, useRadio };","map":null,"metadata":{},"sourceType":"module"}