{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { useReducer, useCallback } from 'react';\nimport { useSealedState } from 'reakit-utils/useSealedState';\nimport '../Id/IdProvider.js';\nimport { unstable_useIdState } from '../Id/IdState.js';\n\nfunction reducer(state, action) {\n  var stops = state.stops,\n      currentId = state.currentId,\n      pastId = state.unstable_pastId,\n      moves = state.unstable_moves,\n      loop = state.loop;\n\n  switch (action.type) {\n    case \"register\":\n      {\n        var _id = action.id,\n            _ref = action.ref;\n\n        if (stops.length === 0) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            stops: [{\n              id: _id,\n              ref: _ref\n            }]\n          });\n        }\n\n        var index = stops.findIndex(function (stop) {\n          return stop.id === _id;\n        });\n\n        if (index >= 0) {\n          return state;\n        }\n\n        var indexToInsertAt = stops.findIndex(function (stop) {\n          if (!stop.ref.current || !_ref.current) return false; // Return true if the new rover element is located earlier in the DOM\n          // than stop's element, else false:\n\n          return Boolean(stop.ref.current.compareDocumentPosition(_ref.current) & Node.DOCUMENT_POSITION_PRECEDING);\n        }); // findIndex returns -1 when the new rover should be inserted\n        // at the end of stops (the compareDocumentPosition test\n        // always returns false in that case).\n\n        if (indexToInsertAt === -1) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            stops: [].concat(stops, [{\n              id: _id,\n              ref: _ref\n            }])\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          stops: [].concat(stops.slice(0, indexToInsertAt), [{\n            id: _id,\n            ref: _ref\n          }], stops.slice(indexToInsertAt))\n        });\n      }\n\n    case \"unregister\":\n      {\n        var _id2 = action.id;\n        var nextStops = stops.filter(function (stop) {\n          return stop.id !== _id2;\n        });\n\n        if (nextStops.length === stops.length) {\n          return state;\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          stops: nextStops,\n          unstable_pastId: pastId && pastId === _id2 ? null : pastId,\n          currentId: currentId && currentId === _id2 ? null : currentId\n        });\n      }\n\n    case \"move\":\n      {\n        var _id3 = action.id,\n            silent = action.silent;\n        var nextMoves = silent ? moves : moves + 1;\n\n        if (_id3 === null) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentId: null,\n            unstable_pastId: currentId,\n            unstable_moves: nextMoves\n          });\n        }\n\n        var _index = stops.findIndex(function (stop) {\n          return stop.id === _id3;\n        }); // Item doesn't exist, so we don't count a move\n\n\n        if (_index === -1) {\n          return state;\n        }\n\n        if (stops[_index].id === currentId) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            unstable_moves: nextMoves\n          });\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentId: stops[_index].id,\n          unstable_pastId: currentId,\n          unstable_moves: nextMoves\n        });\n      }\n\n    case \"next\":\n      {\n        if (currentId == null) {\n          return reducer(state, {\n            type: \"move\",\n            id: stops[0] && stops[0].id\n          });\n        }\n\n        var _index2 = stops.findIndex(function (stop) {\n          return stop.id === currentId;\n        }); // If loop is truthy, turns [0, currentId, 2, 3] into [currentId, 2, 3, 0]\n        // Otherwise turns into [currentId, 2, 3]\n\n\n        var reorderedStops = [].concat(stops.slice(_index2 + 1), loop ? stops.slice(0, _index2) : []);\n        var nextIndex = reorderedStops.findIndex(function (stop) {\n          return stop.id === currentId;\n        }) + 1;\n        return reducer(state, {\n          type: \"move\",\n          id: reorderedStops[nextIndex] && reorderedStops[nextIndex].id\n        });\n      }\n\n    case \"previous\":\n      {\n        var _reducer = reducer(_objectSpread2(_objectSpread2({}, state), {}, {\n          stops: stops.slice().reverse()\n        }), {\n          type: \"next\"\n        }),\n            _ = _reducer.stops,\n            nextState = _objectWithoutPropertiesLoose(_reducer, [\"stops\"]);\n\n        return _objectSpread2(_objectSpread2({}, state), nextState);\n      }\n\n    case \"first\":\n      {\n        var stop = stops[0];\n        return reducer(state, {\n          type: \"move\",\n          id: stop && stop.id\n        });\n      }\n\n    case \"last\":\n      {\n        var _stop = stops[stops.length - 1];\n        return reducer(state, {\n          type: \"move\",\n          id: _stop && _stop.id\n        });\n      }\n\n    case \"reset\":\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentId: null,\n          unstable_pastId: null\n        });\n      }\n\n    case \"orientate\":\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        orientation: action.orientation\n      });\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction useRoverState(initialState) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var _useSealedState = useSealedState(initialState),\n      orientation = _useSealedState.orientation,\n      _useSealedState$curre = _useSealedState.currentId,\n      currentId = _useSealedState$curre === void 0 ? null : _useSealedState$curre,\n      _useSealedState$loop = _useSealedState.loop,\n      loop = _useSealedState$loop === void 0 ? false : _useSealedState$loop,\n      sealed = _objectWithoutPropertiesLoose(_useSealedState, [\"orientation\", \"currentId\", \"loop\"]);\n\n  var _React$useReducer = useReducer(reducer, {\n    orientation: orientation,\n    stops: [],\n    currentId: currentId,\n    unstable_pastId: null,\n    unstable_moves: 0,\n    loop: loop\n  }),\n      state = _React$useReducer[0],\n      dispatch = _React$useReducer[1];\n\n  var idState = unstable_useIdState(sealed);\n  return _objectSpread2(_objectSpread2(_objectSpread2({}, idState), state), {}, {\n    register: useCallback(function (id, ref) {\n      return dispatch({\n        type: \"register\",\n        id: id,\n        ref: ref\n      });\n    }, []),\n    unregister: useCallback(function (id) {\n      return dispatch({\n        type: \"unregister\",\n        id: id\n      });\n    }, []),\n    move: useCallback(function (id, silent) {\n      return dispatch({\n        type: \"move\",\n        id: id,\n        silent: silent\n      });\n    }, []),\n    next: useCallback(function () {\n      return dispatch({\n        type: \"next\"\n      });\n    }, []),\n    previous: useCallback(function () {\n      return dispatch({\n        type: \"previous\"\n      });\n    }, []),\n    first: useCallback(function () {\n      return dispatch({\n        type: \"first\"\n      });\n    }, []),\n    last: useCallback(function () {\n      return dispatch({\n        type: \"last\"\n      });\n    }, []),\n    unstable_reset: useCallback(function () {\n      return dispatch({\n        type: \"reset\"\n      });\n    }, []),\n    unstable_orientate: useCallback(function (o) {\n      return dispatch({\n        type: \"orientate\",\n        orientation: o\n      });\n    }, [])\n  });\n}\n\nexport { useRoverState };","map":null,"metadata":{},"sourceType":"module"}