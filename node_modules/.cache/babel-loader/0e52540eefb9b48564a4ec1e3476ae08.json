{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useContext, useRef, useMemo, useCallback } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport { hasFocusWithin } from 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport '../Clickable/Clickable.js';\nimport '../Button/Button.js';\nimport { createOnKeyDown } from 'reakit-utils/createOnKeyDown';\nimport '../__keys-e6a5cfbe.js';\nimport 'reakit-utils/removeItemFromArray';\nimport { M as MenuContext } from '../MenuContext-6af6cf92.js';\nimport '../__keys-ed7b48af.js';\nimport '../Disclosure/Disclosure.js';\nimport '../Dialog/DialogDisclosure.js';\nimport '../__keys-26bb1730.js';\nimport { c as MENU_BUTTON_KEYS } from '../__keys-41337ef1.js';\nimport { usePopoverDisclosure } from '../Popover/PopoverDisclosure.js';\nimport { f as findVisibleSubmenu } from '../findVisibleSubmenu-1553e354.js';\n\nvar noop = function noop() {};\n\nvar useMenuButton = createHook({\n  name: \"MenuButton\",\n  compose: usePopoverDisclosure,\n  keys: MENU_BUTTON_KEYS,\n  propsAreEqual: function propsAreEqual(prev, next) {\n    var prevPopoverStyles = prev.unstable_popoverStyles,\n        prevArrowStyles = prev.unstable_arrowStyles,\n        prevCurrentId = prev.currentId,\n        prevMoves = prev.unstable_moves,\n        prevProps = _objectWithoutPropertiesLoose(prev, [\"unstable_popoverStyles\", \"unstable_arrowStyles\", \"currentId\", \"unstable_moves\"]);\n\n    var nextPopoverStyles = next.unstable_popoverStyles,\n        nextArrowStyles = next.unstable_arrowStyles,\n        nextCurrentId = next.currentId,\n        nextMoves = next.unstable_moves,\n        nextProps = _objectWithoutPropertiesLoose(next, [\"unstable_popoverStyles\", \"unstable_arrowStyles\", \"currentId\", \"unstable_moves\"]);\n\n    return usePopoverDisclosure.unstable_propsAreEqual(prevProps, nextProps);\n  },\n  useProps: function useProps(options, _ref) {\n    var htmlRef = _ref.ref,\n        htmlOnClick = _ref.onClick,\n        htmlOnKeyDown = _ref.onKeyDown,\n        htmlOnFocus = _ref.onFocus,\n        htmlOnMouseEnter = _ref.onMouseEnter,\n        htmlOnMouseDown = _ref.onMouseDown,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"ref\", \"onClick\", \"onKeyDown\", \"onFocus\", \"onMouseEnter\", \"onMouseDown\"]);\n\n    var parent = useContext(MenuContext);\n    var ref = useRef(null);\n    var hasPressedMouse = useRef(false);\n\n    var _options$placement$sp = options.placement.split(\"-\"),\n        dir = _options$placement$sp[0];\n\n    var hasParent = !!parent;\n    var parentIsMenuBar = (parent === null || parent === void 0 ? void 0 : parent.role) === \"menubar\";\n    var disabled = options.disabled || htmlProps[\"aria-disabled\"];\n    var onClickRef = useLiveRef(htmlOnClick);\n    var onKeyDownRef = useLiveRef(htmlOnKeyDown);\n    var onFocusRef = useLiveRef(htmlOnFocus);\n    var onMouseEnterRef = useLiveRef(htmlOnMouseEnter);\n    var onMouseDownRef = useLiveRef(htmlOnMouseDown);\n    var onKeyDown = useMemo(function () {\n      return createOnKeyDown({\n        onKeyDown: onKeyDownRef,\n        // Doesn't prevent default on Escape, otherwise we can't close\n        // dialogs when MenuButton is focused\n        preventDefault: function preventDefault(event) {\n          return event.key !== \"Escape\";\n        },\n        stopPropagation: function stopPropagation(event) {\n          return event.key !== \"Escape\";\n        },\n        shouldKeyDown: function shouldKeyDown(event) {\n          return event.key === \"Escape\" || !disabled;\n        },\n        onKey: function onKey() {\n          return options.show();\n        },\n        keyMap: function keyMap() {\n          // setTimeout prevents scroll jump\n          var first = options.first && function () {\n            return setTimeout(options.first);\n          };\n\n          var hide = options.hide && function () {\n            var _options$hide;\n\n            return (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);\n          };\n\n          var last = options.last && function () {\n            return setTimeout(options.last);\n          };\n\n          return {\n            Escape: hide,\n            Enter: first,\n            \" \": first,\n            ArrowUp: dir === \"top\" || dir === \"bottom\" ? last : false,\n            ArrowRight: dir === \"right\" && first,\n            ArrowDown: dir === \"bottom\" || dir === \"top\" ? first : false,\n            ArrowLeft: dir === \"left\" && first\n          };\n        }\n      });\n    }, [disabled, dir, hasParent, options.show, options.hide, options.first, options.last]);\n    var onMouseEnter = useCallback(function (event) {\n      var _onMouseEnterRef$curr;\n\n      (_onMouseEnterRef$curr = onMouseEnterRef.current) === null || _onMouseEnterRef$curr === void 0 ? void 0 : _onMouseEnterRef$curr.call(onMouseEnterRef, event);\n      if (event.defaultPrevented) return; // MenuButton's don't do anything on mouse over when they aren't\n      // cointained within a Menu/MenuBar\n\n      if (!parent) return;\n      var element = event.currentTarget;\n\n      if (parentIsMenuBar) {\n        // if MenuButton is an item inside a MenuBar, it'll only open\n        // if there's already another sibling expanded MenuButton\n        if (findVisibleSubmenu(parent.children)) {\n          element.focus();\n        }\n      } else {\n        // If it's in a Menu, open after a short delay\n        // TODO: Make the delay a prop?\n        setTimeout(function () {\n          if (hasFocusWithin(element)) {\n            var _options$show;\n\n            (_options$show = options.show) === null || _options$show === void 0 ? void 0 : _options$show.call(options);\n          }\n        }, 200);\n      }\n    }, [parent, parentIsMenuBar, options.show]);\n    var onMouseDown = useCallback(function (event) {\n      var _onMouseDownRef$curre; // When in menu bar, the menu button can be activated either by focus\n      // or click, but we don't want both to trigger sequentially.\n      // Otherwise, onClick would toggle (hide) the menu right after it got\n      // shown on focus.\n      // This is also useful so we know if the menu button has been clicked\n      // using mouse or keyboard. On mouse click, we don't automatically\n      // focus the first menu item.\n\n\n      hasPressedMouse.current = true;\n      (_onMouseDownRef$curre = onMouseDownRef.current) === null || _onMouseDownRef$curre === void 0 ? void 0 : _onMouseDownRef$curre.call(onMouseDownRef, event);\n    }, []);\n    var onFocus = useCallback(function (event) {\n      var _onFocusRef$current;\n\n      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);\n      if (event.defaultPrevented) return;\n      if (disabled) return;\n\n      if (parentIsMenuBar && !hasPressedMouse.current) {\n        var _options$show2;\n\n        (_options$show2 = options.show) === null || _options$show2 === void 0 ? void 0 : _options$show2.call(options);\n      }\n    }, [parentIsMenuBar, disabled, options.show]); // If disclosure is rendered as a menu bar item, it's toggable\n    // That is, you can click on the expanded disclosure to close its menu.\n\n    var onClick = useCallback(function (event) {\n      var _onClickRef$current;\n\n      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);\n      if (event.defaultPrevented) return; // If menu button is a menu item inside a menu (not menu bar), you\n      // can't close it by clicking on it again.\n\n      if (hasParent && !parentIsMenuBar) {\n        var _options$show3;\n\n        (_options$show3 = options.show) === null || _options$show3 === void 0 ? void 0 : _options$show3.call(options);\n      } else {\n        var _options$toggle; // Otherwise, if menu button is a menu bar item or an orphan menu\n        // button, it's toggable.\n\n\n        (_options$toggle = options.toggle) === null || _options$toggle === void 0 ? void 0 : _options$toggle.call(options); // Focus the menu popover when it's opened with mouse click.\n\n        if (hasPressedMouse.current && !parentIsMenuBar && !options.visible) {\n          var _options$move;\n\n          (_options$move = options.move) === null || _options$move === void 0 ? void 0 : _options$move.call(options, null);\n        }\n      }\n\n      hasPressedMouse.current = false;\n    }, [hasParent, parentIsMenuBar, options.show, options.toggle, options.visible, options.move]);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      \"aria-haspopup\": \"menu\",\n      onKeyDown: onKeyDown,\n      onMouseEnter: onMouseEnter,\n      onMouseDown: onMouseDown,\n      onFocus: onFocus,\n      onClick: onClick\n    }, htmlProps);\n  },\n  useComposeOptions: function useComposeOptions(options) {\n    return _objectSpread2(_objectSpread2({}, options), {}, {\n      // Toggling is handled by MenuButton\n      toggle: noop\n    });\n  }\n});\nvar MenuButton = createComponent({\n  as: \"button\",\n  memo: true,\n  useHook: useMenuButton\n});\nexport { MenuButton, useMenuButton };","map":null,"metadata":{},"sourceType":"module"}