{"ast":null,"code":"import { a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport { useContext, useState, useMemo } from 'react';\nimport { unstable_IdContext } from './IdProvider.js'; // Automatically generated\n\nvar ID_STATE_KEYS = [\"baseId\", \"unstable_idCountRef\", \"setBaseId\"];\nvar ID_KEYS = [].concat(ID_STATE_KEYS, [\"id\"]);\nvar unstable_useId = createHook({\n  keys: ID_KEYS,\n  useOptions: function useOptions(options, htmlProps) {\n    var generateId = useContext(unstable_IdContext);\n\n    var _React$useState = useState(function () {\n      // This comes from useIdState\n      if (options.unstable_idCountRef) {\n        options.unstable_idCountRef.current += 1;\n        return \"-\" + options.unstable_idCountRef.current;\n      } // If there's no useIdState, we check if `baseId` was passed (as a prop,\n      // not from useIdState).\n\n\n      if (options.baseId) {\n        return \"-\" + generateId(\"\");\n      }\n\n      return \"\";\n    }),\n        suffix = _React$useState[0]; // `baseId` will be the prop passed directly as a prop or via useIdState.\n    // If there's neither, then it'll fallback to Context's generateId.\n    // This generateId can result in a sequential ID (if there's a Provider)\n    // or a random string (without Provider).\n\n\n    var baseId = useMemo(function () {\n      return options.baseId || generateId();\n    }, [options.baseId, generateId]);\n    var id = htmlProps.id || options.id || \"\" + baseId + suffix;\n    return _objectSpread2(_objectSpread2({}, options), {}, {\n      id: id\n    });\n  },\n  useProps: function useProps(options, htmlProps) {\n    return _objectSpread2({\n      id: options.id\n    }, htmlProps);\n  }\n});\nvar unstable_Id = createComponent({\n  as: \"div\",\n  useHook: unstable_useId\n});\nexport { unstable_Id, unstable_useId };","map":null,"metadata":{},"sourceType":"module"}