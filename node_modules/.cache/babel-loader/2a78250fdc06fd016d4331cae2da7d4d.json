{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport { useBox } from '../Box/Box.js';\nimport { useCallback } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport { b as TOOLTIP_REFERENCE_KEYS } from '../__keys-d101cb3b.js';\nvar useTooltipReference = createHook({\n  name: \"TooltipReference\",\n  compose: useBox,\n  keys: TOOLTIP_REFERENCE_KEYS,\n  useProps: function useProps(options, _ref) {\n    var htmlRef = _ref.ref,\n        htmlOnFocus = _ref.onFocus,\n        htmlOnBlur = _ref.onBlur,\n        htmlOnMouseEnter = _ref.onMouseEnter,\n        htmlOnMouseLeave = _ref.onMouseLeave,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"ref\", \"onFocus\", \"onBlur\", \"onMouseEnter\", \"onMouseLeave\"]);\n\n    var onFocusRef = useLiveRef(htmlOnFocus);\n    var onBlurRef = useLiveRef(htmlOnBlur);\n    var onMouseEnterRef = useLiveRef(htmlOnMouseEnter);\n    var onMouseLeaveRef = useLiveRef(htmlOnMouseLeave);\n    var onFocus = useCallback(function (event) {\n      var _onFocusRef$current, _options$show;\n\n      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);\n      if (event.defaultPrevented) return;\n      (_options$show = options.show) === null || _options$show === void 0 ? void 0 : _options$show.call(options);\n    }, [options.show]);\n    var onBlur = useCallback(function (event) {\n      var _onBlurRef$current, _options$hide;\n\n      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);\n      if (event.defaultPrevented) return;\n      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);\n    }, [options.hide]);\n    var onMouseEnter = useCallback(function (event) {\n      var _onMouseEnterRef$curr, _options$show2;\n\n      (_onMouseEnterRef$curr = onMouseEnterRef.current) === null || _onMouseEnterRef$curr === void 0 ? void 0 : _onMouseEnterRef$curr.call(onMouseEnterRef, event);\n      if (event.defaultPrevented) return;\n      (_options$show2 = options.show) === null || _options$show2 === void 0 ? void 0 : _options$show2.call(options);\n    }, [options.show]);\n    var onMouseLeave = useCallback(function (event) {\n      var _onMouseLeaveRef$curr, _options$hide2;\n\n      (_onMouseLeaveRef$curr = onMouseLeaveRef.current) === null || _onMouseLeaveRef$curr === void 0 ? void 0 : _onMouseLeaveRef$curr.call(onMouseLeaveRef, event);\n      if (event.defaultPrevented) return;\n      (_options$hide2 = options.hide) === null || _options$hide2 === void 0 ? void 0 : _options$hide2.call(options);\n    }, [options.hide]);\n    return _objectSpread2({\n      ref: useForkRef(options.unstable_referenceRef, htmlRef),\n      tabIndex: 0,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      \"aria-describedby\": options.baseId\n    }, htmlProps);\n  }\n});\nvar TooltipReference = createComponent({\n  as: \"div\",\n  useHook: useTooltipReference\n});\nexport { TooltipReference, useTooltipReference };","map":null,"metadata":{},"sourceType":"module"}