{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { useReducer, useCallback, useEffect } from 'react';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport { useSealedState } from 'reakit-utils/useSealedState';\nimport '../Id/IdProvider.js';\nimport { unstable_useIdState } from '../Id/IdState.js';\nimport { useUpdateEffect } from 'reakit-utils/useUpdateEffect';\nimport { isEmpty } from 'reakit-utils/isEmpty';\nimport { unstable_getIn } from './utils/getIn.js';\nimport { isPromise } from 'reakit-utils/isPromise';\nimport { isPlainObject } from 'reakit-utils/isPlainObject';\nimport { isObject } from 'reakit-utils/isObject';\nimport { unstable_setAllIn } from './utils/setAllIn.js';\nimport 'reakit-utils/toArray';\nimport 'reakit-utils/isInteger';\nimport { unstable_setIn } from './utils/setIn.js';\n\nfunction filterAllEmpty(object) {\n  if (Array.isArray(object)) {\n    return object.filter(function (value) {\n      if (isPlainObject(value) || Array.isArray(value)) {\n        return filterAllEmpty(value);\n      }\n\n      return true;\n    });\n  }\n\n  var result = {};\n  var keys = Object.keys(object);\n\n  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    var k = key;\n    var value = object[k];\n    result[k] = isPlainObject(value) || Array.isArray(value) ? filterAllEmpty(value) : object[k];\n  }\n\n  return result;\n}\n\nfunction hasMessages(errors) {\n  return isObject(errors) && !isEmpty(errors);\n}\n\nfunction getMessages(stateMessages, actionMessages) {\n  return !isEmpty(actionMessages) ? actionMessages : isEmpty(stateMessages) ? stateMessages : {};\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"reset\":\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          values: state.initialValues,\n          touched: {},\n          errors: {},\n          messages: {},\n          valid: true,\n          validating: false,\n          submitting: false,\n          submitFailed: 0,\n          submitSucceed: 0\n        });\n      }\n\n    case \"startValidate\":\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          validating: true\n        });\n      }\n\n    case \"endValidate\":\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          validating: false,\n          errors: getMessages(state.errors, action.errors),\n          messages: getMessages(state.messages, action.messages),\n          valid: !hasMessages(action.errors)\n        });\n      }\n\n    case \"startSubmit\":\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          // @ts-ignore TS bug\n          touched: unstable_setAllIn(state.values, true),\n          submitting: true\n        });\n      }\n\n    case \"endSubmit\":\n      {\n        var valid = !hasMessages(action.errors);\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          valid: valid,\n          submitting: false,\n          errors: getMessages(state.errors, action.errors),\n          messages: getMessages(state.messages, action.messages),\n          submitSucceed: valid ? state.submitSucceed + 1 : state.submitSucceed,\n          submitFailed: valid ? state.submitFailed : state.submitFailed + 1\n        });\n      }\n\n    case \"update\":\n      {\n        var _name = action.name,\n            _value = action.value;\n        var nextValue = typeof _value === \"function\" ? _value(unstable_getIn(state.values, _name)) : _value;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          values: unstable_setIn(state.values, _name, nextValue != null ? nextValue : \"\")\n        });\n      }\n\n    case \"blur\":\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          touched: unstable_setIn(state.touched, action.name, true)\n        });\n      }\n\n    case \"push\":\n      {\n        var array = unstable_getIn(state.values, action.name, []);\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          values: unstable_setIn(state.values, action.name, [].concat(array, [action.value]))\n        });\n      }\n\n    case \"remove\":\n      {\n        var _array = unstable_getIn(state.values, action.name, []).slice();\n\n        delete _array[action.index];\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          values: unstable_setIn(state.values, action.name, _array)\n        });\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\n\nfunction unstable_useFormState(initialState) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var _useSealedState = useSealedState(initialState),\n      _useSealedState$value = _useSealedState.values,\n      initialValues = _useSealedState$value === void 0 ? {} : _useSealedState$value,\n      _useSealedState$valid = _useSealedState.validateOnBlur,\n      validateOnBlur = _useSealedState$valid === void 0 ? true : _useSealedState$valid,\n      _useSealedState$valid2 = _useSealedState.validateOnChange,\n      validateOnChange = _useSealedState$valid2 === void 0 ? true : _useSealedState$valid2,\n      _useSealedState$reset = _useSealedState.resetOnSubmitSucceed,\n      resetOnSubmitSucceed = _useSealedState$reset === void 0 ? false : _useSealedState$reset,\n      _useSealedState$reset2 = _useSealedState.resetOnUnmount,\n      resetOnUnmount = _useSealedState$reset2 === void 0 ? true : _useSealedState$reset2,\n      onValidate = _useSealedState.onValidate,\n      onSubmit = _useSealedState.onSubmit,\n      sealed = _objectWithoutPropertiesLoose(_useSealedState, [\"values\", \"validateOnBlur\", \"validateOnChange\", \"resetOnSubmitSucceed\", \"resetOnUnmount\", \"onValidate\", \"onSubmit\"]);\n\n  var onValidateRef = useLiveRef(typeof initialState !== \"function\" ? initialState.onValidate : onValidate);\n  var onSubmitRef = useLiveRef(typeof initialState !== \"function\" ? initialState.onSubmit : onSubmit);\n  var id = unstable_useIdState(sealed);\n\n  var _React$useReducer = useReducer(reducer, {\n    initialValues: initialValues,\n    values: initialValues,\n    touched: {},\n    errors: {},\n    messages: {},\n    valid: true,\n    validating: false,\n    submitting: false,\n    submitFailed: 0,\n    submitSucceed: 0\n  }),\n      _React$useReducer$ = _React$useReducer[0],\n      _ = _React$useReducer$.initialValues,\n      state = _objectWithoutPropertiesLoose(_React$useReducer$, [\"initialValues\"]),\n      dispatch = _React$useReducer[1];\n\n  var validate = useCallback(function (vals) {\n    if (vals === void 0) {\n      vals = state.values;\n    }\n\n    return new Promise(function (resolve) {\n      if (onValidateRef.current) {\n        var response = onValidateRef.current(vals);\n\n        if (isPromise(response)) {\n          dispatch({\n            type: \"startValidate\"\n          });\n        }\n\n        resolve(Promise.resolve(response).then(function (messages) {\n          dispatch({\n            type: \"endValidate\",\n            messages: messages\n          });\n          return messages;\n        }));\n      } else {\n        resolve(undefined);\n      }\n    }).catch(function (errors) {\n      dispatch({\n        type: \"endValidate\",\n        errors: errors\n      });\n      throw errors;\n    });\n  }, [state.values]);\n  useUpdateEffect(function () {\n    if (validateOnChange) {\n      validate().catch(function () {});\n    }\n  }, [validate, validateOnChange]);\n  useEffect(function () {\n    if (resetOnUnmount) {\n      return function () {\n        dispatch({\n          type: \"reset\"\n        });\n      };\n    }\n\n    return undefined;\n  }, [resetOnUnmount]);\n  return _objectSpread2(_objectSpread2(_objectSpread2({}, id), state), {}, {\n    values: state.values,\n    validate: validate,\n    reset: useCallback(function () {\n      return dispatch({\n        type: \"reset\"\n      });\n    }, []),\n    submit: useCallback(function () {\n      dispatch({\n        type: \"startSubmit\"\n      });\n      return validate().then(function (validateMessages) {\n        if (onSubmitRef.current) {\n          return Promise.resolve(onSubmitRef.current(filterAllEmpty(state.values))).then(function (submitMessages) {\n            var messages = _objectSpread2(_objectSpread2({}, validateMessages), submitMessages);\n\n            dispatch({\n              type: \"endSubmit\",\n              messages: messages\n            });\n          });\n        }\n\n        return dispatch({\n          type: \"endSubmit\",\n          messages: validateMessages\n        });\n      }).then(function () {\n        if (resetOnSubmitSucceed) {\n          dispatch({\n            type: \"reset\"\n          });\n        }\n      }).catch(function (errors) {\n        dispatch({\n          type: \"endSubmit\",\n          errors: errors\n        });\n      });\n    }, [validate]),\n    update: useCallback(function (name, value) {\n      return dispatch({\n        type: \"update\",\n        name: name,\n        value: value\n      });\n    }, []),\n    blur: useCallback(function (name) {\n      dispatch({\n        type: \"blur\",\n        name: name\n      });\n\n      if (validateOnBlur) {\n        validate().catch(function () {});\n      }\n    }, [validate]),\n    push: useCallback(function (name, value) {\n      return dispatch({\n        type: \"push\",\n        name: name,\n        value: value\n      });\n    }, []),\n    remove: useCallback(function (name, index) {\n      return dispatch({\n        type: \"remove\",\n        name: name,\n        index: index\n      });\n    }, [])\n  });\n}\n\nexport { unstable_useFormState };","map":null,"metadata":{},"sourceType":"module"}