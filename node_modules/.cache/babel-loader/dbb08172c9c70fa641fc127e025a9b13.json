{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useState, useEffect, useCallback } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport { warning } from 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport { useClickable } from '../Clickable/Clickable.js';\nimport { removeIndexFromArray } from 'reakit-utils/removeIndexFromArray';\nimport { createEvent } from 'reakit-utils/createEvent'; // Automatically generated\n\nvar CHECKBOX_STATE_KEYS = [\"state\", \"setState\"];\nvar CHECKBOX_KEYS = [].concat(CHECKBOX_STATE_KEYS, [\"value\", \"checked\"]);\n\nfunction getChecked(options) {\n  if (typeof options.checked !== \"undefined\") {\n    return options.checked;\n  }\n\n  if (typeof options.value === \"undefined\") {\n    return !!options.state;\n  }\n\n  var state = Array.isArray(options.state) ? options.state : [];\n  return state.indexOf(options.value) !== -1;\n}\n\nfunction fireChange(element, onChange) {\n  var event = createEvent(element, \"change\");\n  Object.defineProperties(event, {\n    type: {\n      value: \"change\"\n    },\n    target: {\n      value: element\n    },\n    currentTarget: {\n      value: element\n    }\n  });\n  onChange === null || onChange === void 0 ? void 0 : onChange(event);\n}\n\nfunction useIndeterminateState(ref, options) {\n  useEffect(function () {\n    var element = ref.current;\n\n    if (!element) {\n      process.env.NODE_ENV !== \"production\" ? warning(options.state === \"indeterminate\", \"Can't set indeterminate state because `ref` wasn't passed to component.\", \"See https://reakit.io/docs/checkbox/#indeterminate-state\") : void 0;\n      return;\n    }\n\n    if (options.state === \"indeterminate\") {\n      element.indeterminate = true;\n    } else if (element.indeterminate) {\n      element.indeterminate = false;\n    }\n  }, [options.state, ref]);\n}\n\nvar useCheckbox = createHook({\n  name: \"Checkbox\",\n  compose: useClickable,\n  keys: CHECKBOX_KEYS,\n  useOptions: function useOptions(_ref, _ref2) {\n    var value = _ref2.value,\n        checked = _ref2.checked;\n\n    var _ref$unstable_clickOn = _ref.unstable_clickOnEnter,\n        unstable_clickOnEnter = _ref$unstable_clickOn === void 0 ? false : _ref$unstable_clickOn,\n        options = _objectWithoutPropertiesLoose(_ref, [\"unstable_clickOnEnter\"]);\n\n    return _objectSpread2({\n      unstable_clickOnEnter: unstable_clickOnEnter,\n      value: value,\n      checked: getChecked(_objectSpread2({\n        checked: checked\n      }, options))\n    }, options);\n  },\n  useProps: function useProps(options, _ref3) {\n    var htmlRef = _ref3.ref,\n        htmlOnChange = _ref3.onChange,\n        htmlOnClick = _ref3.onClick,\n        htmlProps = _objectWithoutPropertiesLoose(_ref3, [\"ref\", \"onChange\", \"onClick\"]);\n\n    var ref = useRef(null);\n\n    var _React$useState = useState(true),\n        isNativeCheckbox = _React$useState[0],\n        setIsNativeCheckbox = _React$useState[1];\n\n    var onChangeRef = useLiveRef(htmlOnChange);\n    var onClickRef = useLiveRef(htmlOnClick);\n    useEffect(function () {\n      var element = ref.current;\n\n      if (!element) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't determine whether the element is a native checkbox because `ref` wasn't passed to the component\", \"See https://reakit.io/docs/checkbox\") : void 0;\n        return;\n      }\n\n      if (element.tagName !== \"INPUT\" || element.type !== \"checkbox\") {\n        setIsNativeCheckbox(false);\n      }\n    }, []);\n    useIndeterminateState(ref, options);\n    var onChange = useCallback(function (event) {\n      var element = event.currentTarget;\n\n      if (options.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      if (onChangeRef.current) {\n        // If component is NOT rendered as a native input, it will not have\n        // the `checked` property. So we assign it for consistency.\n        if (!isNativeCheckbox) {\n          element.checked = !element.checked;\n        }\n\n        onChangeRef.current(event);\n      }\n\n      if (!options.setState) return;\n\n      if (typeof options.value === \"undefined\") {\n        options.setState(!options.checked);\n      } else {\n        var state = Array.isArray(options.state) ? options.state : [];\n        var index = state.indexOf(options.value);\n\n        if (index === -1) {\n          options.setState([].concat(state, [options.value]));\n        } else {\n          options.setState(removeIndexFromArray(state, index));\n        }\n      }\n    }, [options.disabled, isNativeCheckbox, options.setState, options.value, options.checked, options.state]);\n    var onClick = useCallback(function (event) {\n      var _onClickRef$current;\n\n      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);\n      if (event.defaultPrevented) return;\n      if (isNativeCheckbox) return;\n      fireChange(event.currentTarget, onChange);\n    }, [isNativeCheckbox, onChange]);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      role: !isNativeCheckbox ? \"checkbox\" : undefined,\n      type: isNativeCheckbox ? \"checkbox\" : undefined,\n      value: isNativeCheckbox ? options.value : undefined,\n      checked: options.checked,\n      \"aria-checked\": options.state === \"indeterminate\" ? \"mixed\" : options.checked,\n      onChange: onChange,\n      onClick: onClick\n    }, htmlProps);\n  }\n});\nvar Checkbox = createComponent({\n  as: \"input\",\n  memo: true,\n  useHook: useCheckbox\n});\nexport { Checkbox, useCheckbox };","map":null,"metadata":{},"sourceType":"module"}