{"ast":null,"code":"import 'reakit-utils/flatten';\nimport { warning } from './warning.js';\nimport { useEffect } from 'react';\nimport { isObject } from 'reakit-utils/isObject';\n\nfunction isRefObject(ref) {\n  return isObject(ref) && \"current\" in ref;\n}\n/**\n * Logs `messages` to the console using `console.warn` based on a `condition`.\n * This should be used inside components.\n */\n\n\nfunction useWarning(condition) {\n  for (var _len = arguments.length, messages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    messages[_key - 1] = arguments[_key];\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    useEffect(function () {\n      process.env.NODE_ENV !== \"production\" ? warning.apply(void 0, [condition].concat(messages.map(function (message) {\n        return isRefObject(message) ? message.current : message;\n      }))) : void 0;\n    }, [condition]);\n  }\n}\n\nexport { useWarning };","map":null,"metadata":{},"sourceType":"module"}