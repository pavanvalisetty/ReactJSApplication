{"ast":null,"code":"import { b as _createForOfIteratorHelperLoose, a as _objectSpread2, _ as _objectWithoutPropertiesLoose } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { useRef, useEffect, useReducer, useState, useCallback } from 'react';\nimport { useIsomorphicEffect } from 'reakit-utils/useIsomorphicEffect';\nimport { useSealedState } from 'reakit-utils/useSealedState';\nimport { g as groupItems, r as reverse, f as flatten } from '../reverse-30eaa122.js';\nimport { f as findFirstEnabledItem, g as getCurrentId } from '../getCurrentId-5aa9849e.js';\nimport { f as findEnabledItemById } from '../findEnabledItemById-8ddca752.js';\nimport '../Id/IdProvider.js';\nimport { applyState } from 'reakit-utils/applyState';\nimport { unstable_useIdState } from '../Id/IdState.js';\n\nfunction isElementPreceding(element1, element2) {\n  return Boolean(element2.compareDocumentPosition(element1) & Node.DOCUMENT_POSITION_PRECEDING);\n}\n\nfunction findDOMIndex(items, item) {\n  return items.findIndex(function (currentItem) {\n    if (!currentItem.ref.current || !item.ref.current) {\n      return false;\n    }\n\n    return isElementPreceding(item.ref.current, currentItem.ref.current);\n  });\n}\n\nfunction getMaxLength(rows) {\n  var maxLength = 0;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(rows), _step; !(_step = _iterator()).done;) {\n    var length = _step.value.length;\n\n    if (length > maxLength) {\n      maxLength = length;\n    }\n  }\n\n  return maxLength;\n}\n/**\n * Turns [row1, row1, row2, row2] into [row1, row2, row1, row2]\n */\n\n\nfunction verticalizeItems(items) {\n  var groups = groupItems(items);\n  var maxLength = getMaxLength(groups);\n  var verticalized = [];\n\n  for (var i = 0; i < maxLength; i += 1) {\n    for (var _iterator = _createForOfIteratorHelperLoose(groups), _step; !(_step = _iterator()).done;) {\n      var group = _step.value;\n\n      if (group[i]) {\n        verticalized.push(_objectSpread2(_objectSpread2({}, group[i]), {}, {\n          // If there's no groupId, it means that it's not a grid composite,\n          // but a single row instead. So, instead of verticalizing it, that\n          // is, assigning a different groupId based on the column index, we\n          // keep it undefined so they will be part of the same group.\n          // It's useful when using up/down on one-dimensional composites.\n          groupId: group[i].groupId ? \"\" + i : undefined\n        }));\n      }\n    }\n  }\n\n  return verticalized;\n}\n\nfunction createEmptyItem(groupId) {\n  return {\n    id: \"__EMPTY_ITEM__\",\n    disabled: true,\n    ref: {\n      current: null\n    },\n    groupId: groupId\n  };\n}\n/**\n * Turns [[row1, row1], [row2]] into [[row1, row1], [row2, row2]]\n */\n\n\nfunction fillGroups(groups, currentId, angular) {\n  var maxLength = getMaxLength(groups);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(groups), _step; !(_step = _iterator()).done;) {\n    var group = _step.value;\n\n    for (var i = 0; i < maxLength; i += 1) {\n      var item = group[i];\n\n      if (!item || angular && item.disabled) {\n        var isFrist = i === 0;\n        var previousItem = isFrist && angular ? findFirstEnabledItem(group) : group[i - 1];\n        group[i] = previousItem && currentId !== (previousItem === null || previousItem === void 0 ? void 0 : previousItem.id) && angular ? previousItem : createEmptyItem(previousItem === null || previousItem === void 0 ? void 0 : previousItem.groupId);\n      }\n    }\n  }\n\n  return groups;\n}\n\nvar nullItem = {\n  id: null,\n  ref: {\n    current: null\n  }\n};\n\nfunction placeItemsAfter(items, id, shouldInsertNullItem) {\n  var index = items.findIndex(function (item) {\n    return item.id === id;\n  });\n  return [].concat(items.slice(index + 1), shouldInsertNullItem ? [nullItem] : [], items.slice(0, index));\n}\n\nfunction getItemsInGroup(items, groupId) {\n  return items.filter(function (item) {\n    return item.groupId === groupId;\n  });\n}\n\nvar map = {\n  horizontal: \"vertical\",\n  vertical: \"horizontal\"\n};\n\nfunction getOppositeOrientation(orientation) {\n  return orientation && map[orientation];\n}\n\nfunction addItemAtIndex(array, item, index) {\n  if (!(index in array)) {\n    return [].concat(array, [item]);\n  }\n\n  return [].concat(array.slice(0, index), [item], array.slice(index));\n}\n\nfunction sortBasedOnDOMPosition(items) {\n  var copy = items.slice();\n  var isOrderDifferent = false;\n  copy.sort(function (a, b) {\n    var elementA = a.ref.current;\n    var elementB = b.ref.current;\n    if (!elementA || !elementB) return 0;\n\n    if (isElementPreceding(elementA, elementB)) {\n      isOrderDifferent = true;\n      return -1;\n    }\n\n    return 1;\n  });\n\n  if (isOrderDifferent) {\n    return copy;\n  }\n\n  return items;\n}\n\nfunction setItemsBasedOnDOMPosition(items, setItems) {\n  var sortedItems = sortBasedOnDOMPosition(items);\n\n  if (items !== sortedItems) {\n    setItems(sortedItems);\n  }\n} // istanbul ignore next: JSDOM doesn't support IntersectionObverser\n// See https://github.com/jsdom/jsdom/issues/2032\n\n\nfunction useIntersectionObserver(items, setItems) {\n  var previousItems = useRef([]);\n  useEffect(function () {\n    var callback = function callback() {\n      var hasPreviousItems = !!previousItems.current.length; // We don't want to sort items if items have been just registered.\n\n      if (hasPreviousItems) {\n        setItemsBasedOnDOMPosition(items, setItems);\n      }\n\n      previousItems.current = items;\n    };\n\n    var observer = new IntersectionObserver(callback, {\n      root: document.body\n    });\n\n    for (var _iterator = _createForOfIteratorHelperLoose(items), _step; !(_step = _iterator()).done;) {\n      var item = _step.value;\n\n      if (item.ref.current) {\n        observer.observe(item.ref.current);\n      }\n    }\n\n    return function () {\n      observer.disconnect();\n    };\n  }, [items]);\n}\n\nfunction useTimeoutObserver(items, setItems) {\n  useEffect(function () {\n    var callback = function callback() {\n      return setItemsBasedOnDOMPosition(items, setItems);\n    };\n\n    var timeout = setTimeout(callback, 250);\n    return function () {\n      return clearTimeout(timeout);\n    };\n  });\n}\n\nfunction useSortBasedOnDOMPosition(items, setItems) {\n  if (typeof IntersectionObserver === \"function\") {\n    useIntersectionObserver(items, setItems);\n  } else {\n    useTimeoutObserver(items, setItems);\n  }\n}\n\nfunction reducer(state, action) {\n  var virtual = state.unstable_virtual,\n      rtl = state.rtl,\n      orientation = state.orientation,\n      items = state.items,\n      groups = state.groups,\n      currentId = state.currentId,\n      loop = state.loop,\n      wrap = state.wrap,\n      pastIds = state.pastIds,\n      moves = state.unstable_moves,\n      angular = state.unstable_angular,\n      initialVirtual = state.initialVirtual,\n      initialRTL = state.initialRTL,\n      initialOrientation = state.initialOrientation,\n      initialCurrentId = state.initialCurrentId,\n      initialLoop = state.initialLoop,\n      initialWrap = state.initialWrap,\n      hasSetCurrentId = state.hasSetCurrentId;\n\n  switch (action.type) {\n    case \"registerGroup\":\n      {\n        var _group = action.group; // If there are no groups yet, just add it as the first one\n\n        if (groups.length === 0) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            groups: [_group]\n          });\n        } // Finds the group index based on DOM position\n\n\n        var index = findDOMIndex(groups, _group);\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          groups: addItemAtIndex(groups, _group, index)\n        });\n      }\n\n    case \"unregisterGroup\":\n      {\n        var _id = action.id;\n        var nextGroups = groups.filter(function (group) {\n          return group.id !== _id;\n        }); // The group isn't registered, so do nothing\n\n        if (nextGroups.length === groups.length) {\n          return state;\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          groups: nextGroups\n        });\n      }\n\n    case \"registerItem\":\n      {\n        var _item = action.item; // Finds the item group based on the DOM hierarchy\n\n        var _group2 = groups.find(function (r) {\n          var _r$ref$current;\n\n          return (_r$ref$current = r.ref.current) === null || _r$ref$current === void 0 ? void 0 : _r$ref$current.contains(_item.ref.current);\n        }); // Group will be null if it's a one-dimensional composite\n\n\n        var nextItem = _objectSpread2({\n          groupId: _group2 === null || _group2 === void 0 ? void 0 : _group2.id\n        }, _item);\n\n        var _index = findDOMIndex(items, nextItem);\n\n        var nextState = _objectSpread2(_objectSpread2({}, state), {}, {\n          items: addItemAtIndex(items, nextItem, _index)\n        });\n\n        if (!hasSetCurrentId && !moves && initialCurrentId === undefined) {\n          var _findFirstEnabledItem; // Sets currentId to the first enabled item. This runs whenever an item\n          // is registered because the first enabled item may be registered\n          // asynchronously.\n\n\n          return _objectSpread2(_objectSpread2({}, nextState), {}, {\n            currentId: (_findFirstEnabledItem = findFirstEnabledItem(nextState.items)) === null || _findFirstEnabledItem === void 0 ? void 0 : _findFirstEnabledItem.id\n          });\n        }\n\n        return nextState;\n      }\n\n    case \"unregisterItem\":\n      {\n        var _id2 = action.id;\n        var nextItems = items.filter(function (item) {\n          return item.id !== _id2;\n        }); // The item isn't registered, so do nothing\n\n        if (nextItems.length === items.length) {\n          return state;\n        } // Filters out the item that is being removed from the pastIds list\n\n\n        var nextPastIds = pastIds.filter(function (pastId) {\n          return pastId !== _id2;\n        });\n\n        var _nextState = _objectSpread2(_objectSpread2({}, state), {}, {\n          pastIds: nextPastIds,\n          items: nextItems\n        }); // If the current item is the item that is being removed, focus pastId\n\n\n        if (currentId && currentId === _id2) {\n          var nextId = getCurrentId(_objectSpread2(_objectSpread2({}, _nextState), {}, {\n            currentId: nextPastIds[0]\n          }));\n          return _objectSpread2(_objectSpread2({}, _nextState), {}, {\n            currentId: nextId\n          });\n        }\n\n        return _nextState;\n      }\n\n    case \"move\":\n      {\n        var _id3 = action.id; // move() does nothing\n\n        if (_id3 === undefined) {\n          return state;\n        } // Removes the current item and the item that is receiving focus from the\n        // pastIds list\n\n\n        var filteredPastIds = pastIds.filter(function (pastId) {\n          return pastId !== currentId && pastId !== _id3;\n        }); // If there's a currentId, add it to the pastIds list so it can be focused\n        // if the new item gets removed or disabled\n\n        var _nextPastIds = currentId ? [currentId].concat(filteredPastIds) : filteredPastIds;\n\n        var _nextState2 = _objectSpread2(_objectSpread2({}, state), {}, {\n          pastIds: _nextPastIds\n        }); // move(null) will focus the composite element itself, not an item\n\n\n        if (_id3 === null) {\n          return _objectSpread2(_objectSpread2({}, _nextState2), {}, {\n            unstable_moves: moves + 1,\n            currentId: getCurrentId(_nextState2, _id3)\n          });\n        }\n\n        var _item2 = findEnabledItemById(items, _id3);\n\n        return _objectSpread2(_objectSpread2({}, _nextState2), {}, {\n          unstable_moves: _item2 ? moves + 1 : moves,\n          currentId: getCurrentId(_nextState2, _item2 === null || _item2 === void 0 ? void 0 : _item2.id)\n        });\n      }\n\n    case \"next\":\n      {\n        // If there's no item focused, we just move the first one\n        if (currentId == null) {\n          return reducer(state, _objectSpread2(_objectSpread2({}, action), {}, {\n            type: \"first\"\n          }));\n        } // RTL doesn't make sense on vertical navigation\n\n\n        var isHorizontal = orientation !== \"vertical\";\n        var isRTL = rtl && isHorizontal;\n        var allItems = isRTL ? reverse(items) : items;\n        var currentItem = allItems.find(function (item) {\n          return item.id === currentId;\n        }); // If there's no item focused, we just move the first one\n\n        if (!currentItem) {\n          return reducer(state, _objectSpread2(_objectSpread2({}, action), {}, {\n            type: \"first\"\n          }));\n        }\n\n        var isGrid = !!currentItem.groupId;\n        var currentIndex = allItems.indexOf(currentItem);\n\n        var _nextItems = allItems.slice(currentIndex + 1);\n\n        var nextItemsInGroup = getItemsInGroup(_nextItems, currentItem.groupId); // Home, End\n\n        if (action.allTheWay) {\n          // We reverse so we can get the last enabled item in the group. If it's\n          // RTL, nextItems and nextItemsInGroup are already reversed and don't\n          // have the items before the current one anymore. So we have to get\n          // items in group again with allItems.\n          var _nextItem2 = findFirstEnabledItem(isRTL ? getItemsInGroup(allItems, currentItem.groupId) : reverse(nextItemsInGroup));\n\n          return reducer(state, _objectSpread2(_objectSpread2({}, action), {}, {\n            type: \"move\",\n            id: _nextItem2 === null || _nextItem2 === void 0 ? void 0 : _nextItem2.id\n          }));\n        }\n\n        var oppositeOrientation = getOppositeOrientation( // If it's a grid and orientation is not set, it's a next/previous\n        // call, which is inherently horizontal. up/down will call next with\n        // orientation set to vertical by default (see below on up/down cases).\n        isGrid ? orientation || \"horizontal\" : orientation);\n        var canLoop = loop && loop !== oppositeOrientation;\n        var canWrap = isGrid && wrap && wrap !== oppositeOrientation;\n        var hasNullItem = // `previous` and `up` will set action.hasNullItem, but when calling\n        // next directly, hasNullItem will only be true if it's not a grid and\n        // loop is set to true, which means that pressing right or down keys on\n        // grids will never focus the composite element. On one-dimensional\n        // composites that don't loop, pressing right or down keys also doesn't\n        // focus the composite element.\n        action.hasNullItem || !isGrid && canLoop && initialCurrentId === null;\n\n        if (canLoop) {\n          var loopItems = canWrap && !hasNullItem ? allItems : getItemsInGroup(allItems, currentItem.groupId); // Turns [0, 1, current, 3, 4] into [3, 4, 0, 1]\n\n          var sortedItems = placeItemsAfter(loopItems, currentId, hasNullItem);\n\n          var _nextItem3 = findFirstEnabledItem(sortedItems, currentId);\n\n          return reducer(state, _objectSpread2(_objectSpread2({}, action), {}, {\n            type: \"move\",\n            id: _nextItem3 === null || _nextItem3 === void 0 ? void 0 : _nextItem3.id\n          }));\n        }\n\n        if (canWrap) {\n          var _nextItem4 = findFirstEnabledItem( // We can use nextItems, which contains all the next items, including\n          // items from other groups, to wrap between groups. However, if there\n          // is a null item (the composite element), we'll only use the next\n          // items in the group. So moving next from the last item will focus\n          // the composite element (null). On grid composites, horizontal\n          // navigation never focuses the composite element, only vertical.\n          hasNullItem ? nextItemsInGroup : _nextItems, currentId);\n\n          var _nextId = hasNullItem ? (_nextItem4 === null || _nextItem4 === void 0 ? void 0 : _nextItem4.id) || null : _nextItem4 === null || _nextItem4 === void 0 ? void 0 : _nextItem4.id;\n\n          return reducer(state, _objectSpread2(_objectSpread2({}, action), {}, {\n            type: \"move\",\n            id: _nextId\n          }));\n        }\n\n        var _nextItem = findFirstEnabledItem(nextItemsInGroup, currentId);\n\n        if (!_nextItem && hasNullItem) {\n          return reducer(state, _objectSpread2(_objectSpread2({}, action), {}, {\n            type: \"move\",\n            id: null\n          }));\n        }\n\n        return reducer(state, _objectSpread2(_objectSpread2({}, action), {}, {\n          type: \"move\",\n          id: _nextItem === null || _nextItem === void 0 ? void 0 : _nextItem.id\n        }));\n      }\n\n    case \"previous\":\n      {\n        // If currentId is initially set to null, the composite element will be\n        // focusable while navigating with arrow keys. But, if it's a grid, we\n        // don't want to focus the composite element with horizontal navigation.\n        var _isGrid = !!groups.length;\n\n        var _hasNullItem = !_isGrid && initialCurrentId === null;\n\n        var _nextState3 = reducer(_objectSpread2(_objectSpread2({}, state), {}, {\n          items: reverse(items)\n        }), _objectSpread2(_objectSpread2({}, action), {}, {\n          type: \"next\",\n          hasNullItem: _hasNullItem\n        }));\n\n        return _objectSpread2(_objectSpread2({}, _nextState3), {}, {\n          items: items\n        });\n      }\n\n    case \"down\":\n      {\n        // First, we make sure groups have the same number of items by filling it\n        // with disabled fake items. Then, we reorganize the items list so\n        // [1-1, 1-2, 2-1, 2-2] becomes [1-1, 2-1, 1-2, 2-2].\n        var verticalItems = verticalizeItems(flatten(fillGroups(groupItems(items), currentId, angular)));\n\n        var _canLoop = loop && loop !== \"horizontal\"; // Pressing down arrow key will only focus the composite element if loop\n        // is true or vertical.\n\n\n        var _hasNullItem2 = _canLoop && initialCurrentId === null;\n\n        var _nextState4 = reducer(_objectSpread2(_objectSpread2({}, state), {}, {\n          orientation: \"vertical\",\n          items: verticalItems\n        }), _objectSpread2(_objectSpread2({}, action), {}, {\n          type: \"next\",\n          hasNullItem: _hasNullItem2\n        }));\n\n        return _objectSpread2(_objectSpread2({}, _nextState4), {}, {\n          orientation: orientation,\n          items: items\n        });\n      }\n\n    case \"up\":\n      {\n        var _verticalItems = verticalizeItems(reverse(flatten(fillGroups(groupItems(items), currentId, angular)))); // If currentId is initially set to null, we'll always focus the\n        // composite element when the up arrow key is pressed in the first row.\n\n\n        var _hasNullItem3 = initialCurrentId === null;\n\n        var _nextState5 = reducer(_objectSpread2(_objectSpread2({}, state), {}, {\n          orientation: \"vertical\",\n          items: _verticalItems\n        }), _objectSpread2(_objectSpread2({}, action), {}, {\n          type: \"next\",\n          hasNullItem: _hasNullItem3\n        }));\n\n        return _objectSpread2(_objectSpread2({}, _nextState5), {}, {\n          orientation: orientation,\n          items: items\n        });\n      }\n\n    case \"first\":\n      {\n        var firstItem = findFirstEnabledItem(items);\n        return reducer(state, _objectSpread2(_objectSpread2({}, action), {}, {\n          type: \"move\",\n          id: firstItem === null || firstItem === void 0 ? void 0 : firstItem.id\n        }));\n      }\n\n    case \"last\":\n      {\n        var _nextState6 = reducer(_objectSpread2(_objectSpread2({}, state), {}, {\n          items: reverse(items)\n        }), _objectSpread2(_objectSpread2({}, action), {}, {\n          type: \"first\"\n        }));\n\n        return _objectSpread2(_objectSpread2({}, _nextState6), {}, {\n          items: items\n        });\n      }\n\n    case \"sort\":\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          items: sortBasedOnDOMPosition(items),\n          groups: sortBasedOnDOMPosition(groups)\n        });\n      }\n\n    case \"setVirtual\":\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        unstable_virtual: applyState(action.virtual, virtual)\n      });\n\n    case \"setRTL\":\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        rtl: applyState(action.rtl, rtl)\n      });\n\n    case \"setOrientation\":\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        orientation: applyState(action.orientation, orientation)\n      });\n\n    case \"setCurrentId\":\n      {\n        var nextCurrentId = getCurrentId(_objectSpread2(_objectSpread2({}, state), {}, {\n          currentId: applyState(action.currentId, currentId)\n        }));\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentId: nextCurrentId,\n          hasSetCurrentId: true\n        });\n      }\n\n    case \"setLoop\":\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loop: applyState(action.loop, loop)\n      });\n\n    case \"setWrap\":\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        wrap: applyState(action.wrap, wrap)\n      });\n\n    case \"reset\":\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        unstable_virtual: initialVirtual,\n        rtl: initialRTL,\n        orientation: initialOrientation,\n        currentId: getCurrentId(_objectSpread2(_objectSpread2({}, state), {}, {\n          currentId: initialCurrentId\n        })),\n        loop: initialLoop,\n        wrap: initialWrap,\n        unstable_moves: 0,\n        pastIds: []\n      });\n\n    case \"setItems\":\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          items: action.items\n        });\n      }\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction useAction(fn) {\n  return useCallback(fn, []);\n}\n\nfunction useIsUnmountedRef() {\n  var isUnmountedRef = useRef(false);\n  useIsomorphicEffect(function () {\n    return function () {\n      isUnmountedRef.current = true;\n    };\n  }, []);\n  return isUnmountedRef;\n}\n\nfunction useCompositeState(initialState) {\n  if (initialState === void 0) {\n    initialState = {};\n  }\n\n  var _useSealedState = useSealedState(initialState),\n      _useSealedState$unsta = _useSealedState.unstable_virtual,\n      virtual = _useSealedState$unsta === void 0 ? false : _useSealedState$unsta,\n      _useSealedState$rtl = _useSealedState.rtl,\n      rtl = _useSealedState$rtl === void 0 ? false : _useSealedState$rtl,\n      orientation = _useSealedState.orientation,\n      currentId = _useSealedState.currentId,\n      _useSealedState$loop = _useSealedState.loop,\n      loop = _useSealedState$loop === void 0 ? false : _useSealedState$loop,\n      _useSealedState$wrap = _useSealedState.wrap,\n      wrap = _useSealedState$wrap === void 0 ? false : _useSealedState$wrap,\n      _useSealedState$unsta2 = _useSealedState.unstable_angular,\n      unstable_angular = _useSealedState$unsta2 === void 0 ? false : _useSealedState$unsta2,\n      sealed = _objectWithoutPropertiesLoose(_useSealedState, [\"unstable_virtual\", \"rtl\", \"orientation\", \"currentId\", \"loop\", \"wrap\", \"unstable_angular\"]);\n\n  var _React$useReducer = useReducer(reducer, {\n    unstable_virtual: virtual,\n    rtl: rtl,\n    orientation: orientation,\n    items: [],\n    groups: [],\n    currentId: currentId,\n    loop: loop,\n    wrap: wrap,\n    unstable_moves: 0,\n    pastIds: [],\n    unstable_angular: unstable_angular,\n    initialVirtual: virtual,\n    initialRTL: rtl,\n    initialOrientation: orientation,\n    initialCurrentId: currentId,\n    initialLoop: loop,\n    initialWrap: wrap\n  }),\n      _React$useReducer$ = _React$useReducer[0],\n      pastIds = _React$useReducer$.pastIds,\n      initialVirtual = _React$useReducer$.initialVirtual,\n      initialRTL = _React$useReducer$.initialRTL,\n      initialOrientation = _React$useReducer$.initialOrientation,\n      initialCurrentId = _React$useReducer$.initialCurrentId,\n      initialLoop = _React$useReducer$.initialLoop,\n      initialWrap = _React$useReducer$.initialWrap,\n      hasSetCurrentId = _React$useReducer$.hasSetCurrentId,\n      state = _objectWithoutPropertiesLoose(_React$useReducer$, [\"pastIds\", \"initialVirtual\", \"initialRTL\", \"initialOrientation\", \"initialCurrentId\", \"initialLoop\", \"initialWrap\", \"hasSetCurrentId\"]),\n      dispatch = _React$useReducer[1];\n\n  var _React$useState = useState(false),\n      hasActiveWidget = _React$useState[0],\n      setHasActiveWidget = _React$useState[1];\n\n  var idState = unstable_useIdState(sealed); // register/unregister may be called when this component is unmounted. We\n  // store the unmounted state here so we don't update the state if it's true.\n  // This only happens in a very specific situation.\n  // See https://github.com/reakit/reakit/issues/650\n\n  var isUnmountedRef = useIsUnmountedRef();\n  var setItems = useCallback(function (items) {\n    return dispatch({\n      type: \"setItems\",\n      items: items\n    });\n  }, []);\n  useSortBasedOnDOMPosition(state.items, setItems);\n  return _objectSpread2(_objectSpread2(_objectSpread2({}, idState), state), {}, {\n    unstable_hasActiveWidget: hasActiveWidget,\n    unstable_setHasActiveWidget: setHasActiveWidget,\n    registerItem: useAction(function (item) {\n      if (isUnmountedRef.current) return;\n      dispatch({\n        type: \"registerItem\",\n        item: item\n      });\n    }),\n    unregisterItem: useAction(function (id) {\n      if (isUnmountedRef.current) return;\n      dispatch({\n        type: \"unregisterItem\",\n        id: id\n      });\n    }),\n    registerGroup: useAction(function (group) {\n      if (isUnmountedRef.current) return;\n      dispatch({\n        type: \"registerGroup\",\n        group: group\n      });\n    }),\n    unregisterGroup: useAction(function (id) {\n      if (isUnmountedRef.current) return;\n      dispatch({\n        type: \"unregisterGroup\",\n        id: id\n      });\n    }),\n    move: useAction(function (id) {\n      return dispatch({\n        type: \"move\",\n        id: id\n      });\n    }),\n    next: useAction(function (allTheWay) {\n      return dispatch({\n        type: \"next\",\n        allTheWay: allTheWay\n      });\n    }),\n    previous: useAction(function (allTheWay) {\n      return dispatch({\n        type: \"previous\",\n        allTheWay: allTheWay\n      });\n    }),\n    up: useAction(function (allTheWay) {\n      return dispatch({\n        type: \"up\",\n        allTheWay: allTheWay\n      });\n    }),\n    down: useAction(function (allTheWay) {\n      return dispatch({\n        type: \"down\",\n        allTheWay: allTheWay\n      });\n    }),\n    first: useAction(function () {\n      return dispatch({\n        type: \"first\"\n      });\n    }),\n    last: useAction(function () {\n      return dispatch({\n        type: \"last\"\n      });\n    }),\n    sort: useAction(function () {\n      return dispatch({\n        type: \"sort\"\n      });\n    }),\n    unstable_setVirtual: useAction(function (value) {\n      return dispatch({\n        type: \"setVirtual\",\n        virtual: value\n      });\n    }),\n    setRTL: useAction(function (value) {\n      return dispatch({\n        type: \"setRTL\",\n        rtl: value\n      });\n    }),\n    setOrientation: useAction(function (value) {\n      return dispatch({\n        type: \"setOrientation\",\n        orientation: value\n      });\n    }),\n    setCurrentId: useAction(function (value) {\n      return dispatch({\n        type: \"setCurrentId\",\n        currentId: value\n      });\n    }),\n    setLoop: useAction(function (value) {\n      return dispatch({\n        type: \"setLoop\",\n        loop: value\n      });\n    }),\n    setWrap: useAction(function (value) {\n      return dispatch({\n        type: \"setWrap\",\n        wrap: value\n      });\n    }),\n    reset: useAction(function () {\n      return dispatch({\n        type: \"reset\"\n      });\n    })\n  });\n}\n\nexport { useCompositeState };","map":null,"metadata":{},"sourceType":"module"}