{"ast":null,"code":"import { useContext, createElement } from 'react';\nimport { SystemContext } from './SystemContext.js';\nimport { a as _objectWithoutPropertiesLoose } from './_rollupPluginBabelHelpers-0c84a174.js';\n\nfunction isRenderProp(children) {\n  return typeof children === \"function\";\n}\n/**\n * Custom hook that will call `children` if it's a function. If\n * `useCreateElement` has been passed to the context, it'll be used instead.\n *\n * @example\n * import React from \"react\";\n * import { SystemProvider, useCreateElement } from \"reakit-system\";\n *\n * const system = {\n *   useCreateElement(type, props, children = props.children) {\n *     // very similar to what `useCreateElement` does already\n *     if (typeof children === \"function\") {\n *       const { children: _, ...rest } = props;\n *       return children(rest);\n *     }\n *     return React.createElement(type, props, children);\n *   },\n * };\n *\n * function Component(props) {\n *   return useCreateElement(\"div\", props);\n * }\n *\n * function App() {\n *   return (\n *     <SystemProvider unstable_system={system}>\n *       <Component url=\"url\">{({ url }) => <a href={url}>link</a>}</Component>\n *     </SystemProvider>\n *   );\n * }\n */\n\n\nvar useCreateElement = function useCreateElement(type, props, children) {\n  if (children === void 0) {\n    children = props.children;\n  }\n\n  var context = useContext(SystemContext);\n\n  if (context.useCreateElement) {\n    return context.useCreateElement(type, props, children);\n  }\n\n  if (typeof type === \"string\" && isRenderProp(children)) {\n    var _ = props.children,\n        rest = _objectWithoutPropertiesLoose(props, [\"children\"]);\n\n    return children(rest);\n  }\n\n  return (\n    /*#__PURE__*/\n    createElement(type, props, children)\n  );\n};\n\nexport { useCreateElement };","map":null,"metadata":{},"sourceType":"module"}