{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useEffect, useContext, useState, useCallback, useMemo, createElement, createContext, useReducer } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport { warning, useWarning } from 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport { useIsomorphicEffect } from 'reakit-utils/useIsomorphicEffect';\nimport { hasFocusWithin } from 'reakit-utils/hasFocusWithin';\nimport { getActiveElement } from 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport { getFirstTabbableIn, getLastTabbableIn, isTabbable } from 'reakit-utils/tabbable';\nimport { useCreateElement } from 'reakit-system/useCreateElement';\nimport { getDocument } from 'reakit-utils/getDocument';\nimport { getNextActiveElementOnBlur } from 'reakit-utils/getNextActiveElementOnBlur';\nimport { ensureFocus } from 'reakit-utils/ensureFocus';\nimport '../__keys-e6a5cfbe.js';\nimport { useDisclosureContent } from '../Disclosure/DisclosureContent.js';\nimport 'react-dom';\nimport { Portal } from '../Portal/Portal.js';\nimport { removeItemFromArray } from 'reakit-utils/removeItemFromArray';\nimport { M as MenuContext } from '../MenuContext-6af6cf92.js';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\nimport { useUpdateEffect } from 'reakit-utils/useUpdateEffect';\nimport { closest } from 'reakit-utils/closest';\nimport { contains } from 'reakit-utils/contains';\nimport { D as DialogBackdropContext } from '../DialogBackdropContext-8775f78b.js';\nimport { isEmpty } from 'reakit-utils/isEmpty';\nimport { D as DIALOG_KEYS } from '../__keys-ed7b48af.js';\n\nfunction useDisclosureRef(dialogRef, options) {\n  var ref = useRef(null);\n  var animating = !!(options.animated && options.animating);\n  useEffect(function () {\n    if (options.visible || animating) return undefined; // We get the last focused element before the dialog opens, so we can move\n    // focus back to it when the dialog closes.\n\n    var onFocus = function onFocus(event) {\n      var target = event.target;\n\n      if (\"focus\" in target) {\n        ref.current = target;\n\n        if (options.unstable_disclosureRef) {\n          options.unstable_disclosureRef.current = target;\n        }\n      }\n    };\n\n    var document = getDocument(dialogRef.current);\n    document.addEventListener(\"focusin\", onFocus);\n    return function () {\n      return document.removeEventListener(\"focusin\", onFocus);\n    };\n  }, [options.visible, animating, options.unstable_disclosureRef, dialogRef]);\n  useEffect(function () {\n    var _options$unstable_dis;\n\n    if (!options.visible || animating) return undefined; // Safari and Firefox on MacOS don't focus on buttons on mouse down.\n    // Instead, they focus on the closest focusable parent (ultimately, the\n    // body element). This works around that by preventing that behavior and\n    // forcing focus on the disclosure button. Otherwise, we wouldn't be able\n    // to close the dialog by clicking again on the disclosure.\n\n    var onMouseDown = function onMouseDown(event) {\n      var element = event.currentTarget;\n      event.preventDefault();\n      element.focus();\n    };\n\n    var disclosure = ((_options$unstable_dis = options.unstable_disclosureRef) === null || _options$unstable_dis === void 0 ? void 0 : _options$unstable_dis.current) || ref.current;\n    disclosure === null || disclosure === void 0 ? void 0 : disclosure.addEventListener(\"mousedown\", onMouseDown);\n    return function () {\n      return disclosure === null || disclosure === void 0 ? void 0 : disclosure.removeEventListener(\"mousedown\", onMouseDown);\n    };\n  }, [options.visible, animating, options.unstable_disclosureRef]);\n  return options.unstable_disclosureRef || ref;\n}\n\nfunction usePreventBodyScroll(targetRef, options) {\n  var shouldPrevent = Boolean(options.preventBodyScroll && options.visible);\n  useEffect(function () {\n    var element = targetRef.current;\n    if (!element || !shouldPrevent) return undefined;\n    disableBodyScroll(element, {\n      reserveScrollBarGap: true\n    });\n    return function () {\n      return enableBodyScroll(element);\n    };\n  }, [targetRef, shouldPrevent]);\n}\n\nfunction useFocusOnShow(dialogRef, nestedDialogs, options) {\n  var initialFocusRef = options.unstable_initialFocusRef;\n  var shouldFocus = options.visible && options.unstable_autoFocusOnShow;\n  var animating = !!(options.animated && options.animating);\n  useUpdateEffect(function () {\n    var dialog = dialogRef.current;\n    process.env.NODE_ENV !== \"production\" ? warning(!!shouldFocus && !dialog, \"[reakit/Dialog]\", \"Can't set initial focus on dialog because `ref` wasn't passed to the dialog element.\", \"See https://reakit.io/docs/dialog\") : void 0;\n    if (!shouldFocus) return;\n    if (!dialog) return;\n    if (animating) return; // If there're nested open dialogs, let them handle focus\n\n    if (nestedDialogs.some(function (child) {\n      return child.current && !child.current.hidden;\n    })) {\n      return;\n    }\n\n    if (initialFocusRef === null || initialFocusRef === void 0 ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus({\n        preventScroll: true\n      });\n    } else {\n      var tabbable = getFirstTabbableIn(dialog, true);\n\n      var isActive = function isActive() {\n        return hasFocusWithin(dialog);\n      };\n\n      if (tabbable) {\n        ensureFocus(tabbable, {\n          preventScroll: true,\n          isActive: isActive\n        });\n      } else {\n        ensureFocus(dialog, {\n          preventScroll: true,\n          isActive: isActive\n        });\n        process.env.NODE_ENV !== \"production\" ? warning(dialog.tabIndex === undefined || dialog.tabIndex < 0, \"It's recommended to have at least one tabbable element inside dialog. The dialog element has been automatically focused.\", \"If this is the intended behavior, pass `tabIndex={0}` to the dialog element to disable this warning.\", \"See https://reakit.io/docs/dialog/#initial-focus\", dialog) : void 0;\n      }\n    }\n  }, [dialogRef, shouldFocus, animating, nestedDialogs, initialFocusRef]);\n}\n\nfunction usePortalRef(dialogRef, options) {\n  var portalRef = useRef(null);\n  useEffect(function () {\n    var dialog = dialogRef.current;\n    if (!dialog || !options.visible) return;\n    portalRef.current = closest(dialog, Portal.__selector);\n  }, [dialogRef, options.visible]);\n  return portalRef;\n}\n\nfunction removeFromDOM(element) {\n  if (element.parentNode == null) return;\n  element.parentNode.removeChild(element);\n}\n\nvar focusTrapClassName = \"__reakit-focus-trap\";\n\nfunction isFocusTrap(element) {\n  var _element$classList;\n\n  return (_element$classList = element.classList) === null || _element$classList === void 0 ? void 0 : _element$classList.contains(focusTrapClassName);\n}\n\nfunction useFocusTrap(dialogRef, visibleModals, options) {\n  var portalRef = usePortalRef(dialogRef, options);\n  var shouldTrap = options.visible && options.modal;\n  var beforeElement = useRef(null);\n  var afterElement = useRef(null); // Create before and after elements\n  // https://github.com/w3c/aria-practices/issues/545\n\n  useEffect(function () {\n    if (!shouldTrap) return undefined;\n    var portal = portalRef.current;\n\n    if (!portal) {\n      process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't trap focus within modal dialog because either `ref` wasn't passed to component or the component wasn't rendered within a portal\", \"See https://reakit.io/docs/dialog\") : void 0;\n      return undefined;\n    }\n\n    if (!beforeElement.current) {\n      var document = getDocument(portal);\n      beforeElement.current = document.createElement(\"div\");\n      beforeElement.current.className = focusTrapClassName;\n      beforeElement.current.tabIndex = 0;\n      beforeElement.current.style.position = \"fixed\";\n      beforeElement.current.setAttribute(\"aria-hidden\", \"true\");\n    }\n\n    if (!afterElement.current) {\n      afterElement.current = beforeElement.current.cloneNode();\n    }\n\n    portal.insertAdjacentElement(\"beforebegin\", beforeElement.current);\n    portal.insertAdjacentElement(\"afterend\", afterElement.current);\n    return function () {\n      if (beforeElement.current) removeFromDOM(beforeElement.current);\n      if (afterElement.current) removeFromDOM(afterElement.current);\n    };\n  }, [portalRef, shouldTrap]); // Focus trap\n\n  useEffect(function () {\n    var before = beforeElement.current;\n    var after = afterElement.current;\n    if (!shouldTrap || !before || !after) return undefined;\n\n    var handleFocus = function handleFocus(event) {\n      var dialog = dialogRef.current;\n      if (!dialog || visibleModals.length) return;\n      event.preventDefault();\n      var isAfter = event.target === after;\n      var tabbable = isAfter ? getFirstTabbableIn(dialog) : getLastTabbableIn(dialog);\n\n      if (tabbable) {\n        tabbable.focus();\n      } else {\n        // fallback to dialog\n        dialog.focus();\n      }\n    };\n\n    before.addEventListener(\"focus\", handleFocus);\n    after.addEventListener(\"focus\", handleFocus);\n    return function () {\n      before.removeEventListener(\"focus\", handleFocus);\n      after.removeEventListener(\"focus\", handleFocus);\n    };\n  }, [dialogRef, visibleModals, shouldTrap]);\n}\n\nfunction hidByFocusingAnotherElement(dialogRef) {\n  var dialog = dialogRef.current;\n  if (!dialog) return false;\n  var activeElement = getActiveElement(dialog);\n  if (!activeElement) return false;\n  if (contains(dialog, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  if (activeElement.getAttribute(\"data-dialog\") === \"true\") return true;\n  return false;\n}\n\nfunction useFocusOnHide(dialogRef, disclosureRef, options) {\n  var shouldFocus = options.unstable_autoFocusOnHide && !options.visible;\n  var animating = !!(options.animated && options.animating);\n  useUpdateEffect(function () {\n    var _options$unstable_fin;\n\n    if (!shouldFocus) return;\n    if (animating) return; // Hide was triggered by a click/focus on a tabbable element outside\n    // the dialog or on another dialog. We won't change focus then.\n\n    if (hidByFocusingAnotherElement(dialogRef)) {\n      return;\n    }\n\n    var finalFocusEl = ((_options$unstable_fin = options.unstable_finalFocusRef) === null || _options$unstable_fin === void 0 ? void 0 : _options$unstable_fin.current) || disclosureRef.current;\n\n    if (finalFocusEl) {\n      ensureFocus(finalFocusEl);\n      return;\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't return focus after closing dialog. Either render a disclosure component or provide a `unstable_finalFocusRef` prop.\", \"See https://reakit.io/docs/dialog\", dialogRef.current) : void 0;\n  }, [shouldFocus, animating, dialogRef, disclosureRef]);\n}\n\nvar DialogContext =\n/*#__PURE__*/\ncreateContext({});\n\nfunction useNestedDialogs(dialogRef, options) {\n  var context = useContext(DialogContext);\n\n  var _React$useState = useState([]),\n      dialogs = _React$useState[0],\n      setDialogs = _React$useState[1];\n\n  var _React$useState2 = useState(dialogs),\n      visibleModals = _React$useState2[0],\n      setVisibleModals = _React$useState2[1];\n\n  var addDialog = useCallback(function (ref) {\n    var _context$addDialog;\n\n    (_context$addDialog = context.addDialog) === null || _context$addDialog === void 0 ? void 0 : _context$addDialog.call(context, ref);\n    setDialogs(function (prevDialogs) {\n      return [].concat(prevDialogs, [ref]);\n    });\n  }, [context.addDialog]);\n  var removeDialog = useCallback(function (ref) {\n    var _context$removeDialog;\n\n    (_context$removeDialog = context.removeDialog) === null || _context$removeDialog === void 0 ? void 0 : _context$removeDialog.call(context, ref);\n    setDialogs(function (prevDialogs) {\n      return removeItemFromArray(prevDialogs, ref);\n    });\n  }, [context.removeDialog]);\n  var showDialog = useCallback(function (ref) {\n    var _context$showDialog;\n\n    (_context$showDialog = context.showDialog) === null || _context$showDialog === void 0 ? void 0 : _context$showDialog.call(context, ref);\n    setVisibleModals(function (prevDialogs) {\n      return [].concat(prevDialogs, [ref]);\n    });\n  }, [context.showDialog]);\n  var hideDialog = useCallback(function (ref) {\n    var _context$hideDialog;\n\n    (_context$hideDialog = context.hideDialog) === null || _context$hideDialog === void 0 ? void 0 : _context$hideDialog.call(context, ref);\n    setVisibleModals(function (prevDialogs) {\n      return removeItemFromArray(prevDialogs, ref);\n    });\n  }, [context.hideDialog]); // If it's a nested dialog, add it to context\n\n  useEffect(function () {\n    var _context$addDialog2;\n\n    if (options.unstable_orphan) return undefined;\n    (_context$addDialog2 = context.addDialog) === null || _context$addDialog2 === void 0 ? void 0 : _context$addDialog2.call(context, dialogRef);\n    return function () {\n      var _context$removeDialog2;\n\n      (_context$removeDialog2 = context.removeDialog) === null || _context$removeDialog2 === void 0 ? void 0 : _context$removeDialog2.call(context, dialogRef);\n    };\n  }, [options.unstable_orphan, context.addDialog, dialogRef, context.removeDialog]);\n  useEffect(function () {\n    var _context$showDialog2;\n\n    if (options.unstable_orphan) return undefined;\n    if (!options.modal) return undefined;\n    if (!options.visible) return undefined;\n    (_context$showDialog2 = context.showDialog) === null || _context$showDialog2 === void 0 ? void 0 : _context$showDialog2.call(context, dialogRef);\n    return function () {\n      var _context$hideDialog2;\n\n      (_context$hideDialog2 = context.hideDialog) === null || _context$hideDialog2 === void 0 ? void 0 : _context$hideDialog2.call(context, dialogRef);\n    };\n  }, [options.unstable_orphan, options.modal, options.visible, context.showDialog, dialogRef, context.hideDialog]); // Close all nested dialogs when parent dialog closes\n\n  useEffect(function () {\n    if (context.visible === false && options.visible && !options.unstable_orphan) {\n      var _options$hide;\n\n      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);\n    }\n  }, [context.visible, options.visible, options.hide, options.unstable_orphan]); // Provider\n\n  var providerValue = useMemo(function () {\n    return {\n      visible: options.visible,\n      addDialog: addDialog,\n      removeDialog: removeDialog,\n      showDialog: showDialog,\n      hideDialog: hideDialog\n    };\n  }, [options.visible, addDialog, removeDialog, showDialog, hideDialog]);\n  var wrap = useCallback(function (element) {\n    return (\n      /*#__PURE__*/\n      createElement(DialogContext.Provider, {\n        value: providerValue\n      }, element)\n    );\n  }, [providerValue]);\n  return {\n    dialogs: dialogs,\n    visibleModals: visibleModals,\n    wrap: wrap\n  };\n}\n\nfunction dialogContains(target) {\n  return function (dialogRef) {\n    var dialog = dialogRef.current;\n    if (!dialog) return false;\n    if (contains(dialog, target)) return true;\n    var document = getDocument(dialog);\n    var backdrop = document.querySelector(\"[data-dialog-ref=\\\"\" + dialog.id + \"\\\"]\");\n\n    if (backdrop) {\n      return contains(backdrop, target);\n    }\n\n    return false;\n  };\n}\n\nfunction isDisclosure(target, disclosure) {\n  return contains(disclosure, target);\n}\n\nfunction isInDocument(target) {\n  var document = getDocument(target);\n\n  if (target.tagName === \"HTML\") {\n    return true;\n  }\n\n  return contains(document.body, target);\n}\n\nfunction useEventListenerOutside(containerRef, disclosureRef, nestedDialogs, eventType, listener, shouldListen, capture) {\n  var listenerRef = useLiveRef(listener);\n  useEffect(function () {\n    if (!shouldListen) return undefined;\n\n    var onEvent = function onEvent(event) {\n      if (!listenerRef.current) return;\n      var container = containerRef.current;\n      var disclosure = disclosureRef.current;\n      var target = event.target;\n\n      if (!container) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't detect events outside dialog because `ref` wasn't passed to component.\", \"See https://reakit.io/docs/dialog\") : void 0;\n        return;\n      } // When an element is unmounted right after it receives focus, the focus\n      // event is triggered after that, when the element isn't part of the\n      // current document anymore. So we ignore it.\n\n\n      if (!isInDocument(target)) return; // Event inside dialog\n\n      if (contains(container, target)) return; // Event on disclosure\n\n      if (disclosure && isDisclosure(target, disclosure)) return; // Event inside a nested dialog or focus trap\n\n      if (isFocusTrap(target) || nestedDialogs.some(dialogContains(target))) {\n        return;\n      }\n\n      listenerRef.current(event);\n    };\n\n    var document = getDocument(containerRef.current);\n    document.addEventListener(eventType, onEvent, capture);\n    return function () {\n      return document.removeEventListener(eventType, onEvent, capture);\n    };\n  }, [containerRef, disclosureRef, nestedDialogs, eventType, shouldListen, listenerRef]);\n}\n\nfunction useMouseDownRef(dialogRef, options) {\n  var mouseDownRef = useRef();\n  useEffect(function () {\n    if (!options.visible) return undefined;\n    if (!options.hideOnClickOutside) return undefined;\n    var document = getDocument(dialogRef.current);\n\n    var onMouseDown = function onMouseDown(event) {\n      mouseDownRef.current = event.target;\n    };\n\n    document.addEventListener(\"mousedown\", onMouseDown);\n    return function () {\n      return document.removeEventListener(\"mousedown\", onMouseDown);\n    };\n  }, [options.visible, options.hideOnClickOutside, dialogRef]);\n  return mouseDownRef;\n}\n\nfunction useHideOnClickOutside(dialogRef, disclosureRef, nestedDialogs, options) {\n  var mouseDownRef = useMouseDownRef(dialogRef, options);\n  useEventListenerOutside(dialogRef, disclosureRef, nestedDialogs, \"click\", function (event) {\n    // Make sure the element that has been clicked is the same that last\n    // triggered the mousedown event. This prevents the dialog from closing\n    // by dragging the cursor (for example, selecting some text inside the\n    // dialog and releasing the mouse outside of it).\n    if (mouseDownRef.current === event.target) {\n      var _options$hide;\n\n      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);\n    }\n  }, options.visible && options.hideOnClickOutside);\n  useEventListenerOutside(dialogRef, disclosureRef, nestedDialogs, \"focusin\", function (event) {\n    var document = getDocument(dialogRef.current); // Fix for https://github.com/reakit/reakit/issues/619\n    // On IE11, calling element.blur() triggers the focus event on\n    // document.body, so we make sure to ignore it as well.\n\n    if (event.target !== document && event.target !== document.body) {\n      var _options$hide2;\n\n      (_options$hide2 = options.hide) === null || _options$hide2 === void 0 ? void 0 : _options$hide2.call(options);\n    }\n  }, options.visible && options.hideOnClickOutside);\n}\n\nfunction useDisableHoverOutside(portalRef, nestedDialogs, options) {\n  var useEvent = function useEvent(eventType) {\n    return useEventListenerOutside(portalRef, {\n      current: null\n    }, nestedDialogs, eventType, function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }, options.visible && options.modal, true);\n  };\n\n  useEvent(\"mouseover\");\n  useEvent(\"mousemove\");\n  useEvent(\"mouseout\");\n}\n/**\n * When the focused child gets removed from the DOM, we make sure to move focus\n * to the dialog.\n */\n\n\nfunction useFocusOnChildUnmount(dialogRef, options) {\n  useEffect(function () {\n    var dialog = dialogRef.current;\n    if (!options.visible || !dialog) return undefined;\n    var observer = new MutationObserver(function (mutations) {\n      var target = mutations[0].target; // If target is not this dialog, then this observer was triggered by a\n      // nested dialog, so we just ignore it here and let the nested dialog\n      // handle it there.\n\n      if (target !== dialog) return;\n      var document = getDocument(dialog);\n      var activeElement = getActiveElement(dialog); // We can check if the current focused element is the document body. On\n      // IE 11, it's an empty object when the current document is in a frame or\n      // iframe.\n\n      if (activeElement === document.body || isEmpty(activeElement)) {\n        dialog.focus();\n      }\n    });\n    observer.observe(dialog, {\n      childList: true,\n      subtree: true\n    });\n    return function () {\n      observer.disconnect();\n    };\n  }, [options.visible, dialogRef]);\n}\n\nfunction isActualElement(element) {\n  return element && element.tagName && element.tagName !== \"HTML\" && element !== getDocument(element).body;\n}\n\nfunction useFocusOnBlur(dialogRef, options) {\n  var _React$useReducer = useReducer(function (n) {\n    return n + 1;\n  }, 0),\n      blurred = _React$useReducer[0],\n      scheduleFocus = _React$useReducer[1];\n\n  useIsomorphicEffect(function () {\n    var dialog = dialogRef.current;\n    if (!options.visible) return;\n    if (!blurred) return; // After blur, if the active element isn't an actual element, this probably\n    // means that element.blur() was called on an element inside the dialog.\n    // In this case, the browser will automatically focus the body element.\n    // So we move focus back to the dialog.\n\n    if (!isActualElement(getActiveElement(dialog))) {\n      process.env.NODE_ENV !== \"production\" ? warning(!dialog, \"Can't focus dialog after a nested element got blurred because `ref` wasn't passed to the component\", \"See https://reakit.io/docs/dialog\") : void 0;\n      dialog === null || dialog === void 0 ? void 0 : dialog.focus();\n    }\n  }, [blurred, dialogRef]);\n  var onBlur = useCallback(function (event) {\n    if (!options.visible) return;\n    var nextActiveElement = getNextActiveElementOnBlur(event);\n\n    if (!isActualElement(nextActiveElement)) {\n      scheduleFocus();\n    }\n  }, [options.visible]);\n  return onBlur;\n}\n\nvar useDialog = createHook({\n  name: \"Dialog\",\n  compose: useDisclosureContent,\n  keys: DIALOG_KEYS,\n  useOptions: function useOptions(_ref) {\n    var _ref$modal = _ref.modal,\n        modal = _ref$modal === void 0 ? true : _ref$modal,\n        _ref$hideOnEsc = _ref.hideOnEsc,\n        hideOnEsc = _ref$hideOnEsc === void 0 ? true : _ref$hideOnEsc,\n        _ref$hideOnClickOutsi = _ref.hideOnClickOutside,\n        hideOnClickOutside = _ref$hideOnClickOutsi === void 0 ? true : _ref$hideOnClickOutsi,\n        _ref$preventBodyScrol = _ref.preventBodyScroll,\n        preventBodyScroll = _ref$preventBodyScrol === void 0 ? modal : _ref$preventBodyScrol,\n        _ref$unstable_autoFoc = _ref.unstable_autoFocusOnShow,\n        unstable_autoFocusOnShow = _ref$unstable_autoFoc === void 0 ? true : _ref$unstable_autoFoc,\n        _ref$unstable_autoFoc2 = _ref.unstable_autoFocusOnHide,\n        unstable_autoFocusOnHide = _ref$unstable_autoFoc2 === void 0 ? true : _ref$unstable_autoFoc2,\n        unstable_orphan = _ref.unstable_orphan,\n        options = _objectWithoutPropertiesLoose(_ref, [\"modal\", \"hideOnEsc\", \"hideOnClickOutside\", \"preventBodyScroll\", \"unstable_autoFocusOnShow\", \"unstable_autoFocusOnHide\", \"unstable_orphan\"]);\n\n    return _objectSpread2({\n      modal: modal,\n      hideOnEsc: hideOnEsc,\n      hideOnClickOutside: hideOnClickOutside,\n      preventBodyScroll: modal && preventBodyScroll,\n      unstable_autoFocusOnShow: unstable_autoFocusOnShow,\n      unstable_autoFocusOnHide: unstable_autoFocusOnHide,\n      unstable_orphan: modal && unstable_orphan\n    }, options);\n  },\n  useProps: function useProps(options, _ref2) {\n    var htmlRef = _ref2.ref,\n        htmlOnKeyDown = _ref2.onKeyDown,\n        htmlOnBlur = _ref2.onBlur,\n        htmlWrapElement = _ref2.wrapElement,\n        tabIndex = _ref2.tabIndex,\n        htmlProps = _objectWithoutPropertiesLoose(_ref2, [\"ref\", \"onKeyDown\", \"onBlur\", \"wrapElement\", \"tabIndex\"]);\n\n    var dialog = useRef(null);\n    var backdrop = useContext(DialogBackdropContext);\n    var hasBackdrop = backdrop && backdrop === options.baseId;\n    var disclosure = useDisclosureRef(dialog, options);\n    var onKeyDownRef = useLiveRef(htmlOnKeyDown);\n    var onBlurRef = useLiveRef(htmlOnBlur);\n    var focusOnBlur = useFocusOnBlur(dialog, options);\n\n    var _useNestedDialogs = useNestedDialogs(dialog, options),\n        dialogs = _useNestedDialogs.dialogs,\n        visibleModals = _useNestedDialogs.visibleModals,\n        wrap = _useNestedDialogs.wrap; // VoiceOver/Safari accepts only one `aria-modal` container, so if there\n    // are visible child modals, then we don't want to set aria-modal on the\n    // parent modal (this component).\n\n\n    var modal = options.modal && !visibleModals.length ? true : undefined;\n    usePreventBodyScroll(dialog, options);\n    useFocusTrap(dialog, visibleModals, options);\n    useFocusOnChildUnmount(dialog, options);\n    useFocusOnShow(dialog, dialogs, options);\n    useFocusOnHide(dialog, disclosure, options);\n    useHideOnClickOutside(dialog, disclosure, dialogs, options);\n    useDisableHoverOutside(dialog, dialogs, options);\n    var onKeyDown = useCallback(function (event) {\n      var _onKeyDownRef$current;\n\n      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);\n      if (event.defaultPrevented) return;\n      if (event.key !== \"Escape\") return;\n      if (!options.hideOnEsc) return;\n\n      if (!options.hide) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"`hideOnEsc` prop is truthy, but `hide` prop wasn't provided.\", \"See https://reakit.io/docs/dialog\", dialog.current) : void 0;\n        return;\n      }\n\n      event.stopPropagation();\n      options.hide();\n    }, [options.hideOnEsc, options.hide]);\n    var onBlur = useCallback(function (event) {\n      var _onBlurRef$current;\n\n      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);\n      focusOnBlur(event);\n    }, [focusOnBlur]);\n    var wrapElement = useCallback(function (element) {\n      element = wrap(element);\n\n      if (options.modal && !hasBackdrop) {\n        element =\n        /*#__PURE__*/\n        createElement(Portal, null, element);\n      }\n\n      if (htmlWrapElement) {\n        element = htmlWrapElement(element);\n      }\n\n      return (\n        /*#__PURE__*/\n        // Prevents Menu > Dialog > Menu to behave as a sub menu\n        createElement(MenuContext.Provider, {\n          value: null\n        }, element)\n      );\n    }, [wrap, options.modal, hasBackdrop, htmlWrapElement]);\n    return _objectSpread2({\n      ref: useForkRef(dialog, htmlRef),\n      role: \"dialog\",\n      tabIndex: tabIndex != null ? tabIndex : -1,\n      \"aria-modal\": modal,\n      \"data-dialog\": true,\n      onKeyDown: onKeyDown,\n      onBlur: onBlur,\n      wrapElement: wrapElement\n    }, htmlProps);\n  }\n});\nvar Dialog = createComponent({\n  as: \"div\",\n  useHook: useDialog,\n  useCreateElement: function useCreateElement$1(type, props, children) {\n    process.env.NODE_ENV !== \"production\" ? useWarning(!props[\"aria-label\"] && !props[\"aria-labelledby\"], \"You should provide either `aria-label` or `aria-labelledby` props.\", \"See https://reakit.io/docs/dialog\") : void 0;\n    return useCreateElement(type, props, children);\n  }\n});\nexport { Dialog, useDialog };","map":null,"metadata":{},"sourceType":"module"}