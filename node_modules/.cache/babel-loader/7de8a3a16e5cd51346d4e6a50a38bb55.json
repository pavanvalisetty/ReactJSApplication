{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useCallback, useContext } from 'react';\nimport 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport { hasFocusWithin } from 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport '../Clickable/Clickable.js';\nimport 'reakit-utils/createOnKeyDown';\nimport 'reakit-utils/getDocument';\nimport '../getCurrentId-5aa9849e.js';\nimport '../__keys-6b7fda7f.js';\nimport '../Id/IdProvider.js';\nimport '../Id/Id.js';\nimport 'reakit-utils/isTextField';\nimport 'reakit-utils/ensureFocus';\nimport '../setTextFieldValue-78ab5d56.js';\nimport { useCompositeItem } from '../Composite/CompositeItem.js';\nimport 'reakit-utils/removeItemFromArray';\nimport { M as MenuContext } from '../MenuContext-6af6cf92.js';\nimport { contains } from 'reakit-utils/contains';\nimport { e as MENU_ITEM_KEYS } from '../__keys-41337ef1.js';\nimport { f as findVisibleSubmenu } from '../findVisibleSubmenu-1553e354.js';\n\nfunction getTriangleArea(a, b, c) {\n  return Math.abs((a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)) / 2);\n}\n\nfunction isPointInTriangle(point, a, b, c) {\n  var A = getTriangleArea(a, b, c);\n  var A1 = getTriangleArea(point, b, c);\n  var A2 = getTriangleArea(a, point, c);\n  var A3 = getTriangleArea(a, b, point);\n  return A === A1 + A2 + A3;\n}\n\nfunction getSubmenuAnchorPoints(event, visibleSubmenu) {\n  var _visibleSubmenu$getBo = visibleSubmenu.getBoundingClientRect(),\n      top = _visibleSubmenu$getBo.top,\n      right = _visibleSubmenu$getBo.right,\n      bottom = _visibleSubmenu$getBo.bottom,\n      left = _visibleSubmenu$getBo.left; // If left is bigger than mouse's clientX, than the submenu is visible on\n  // the left side\n\n\n  var x = left > event.clientX ? left : right;\n  return [{\n    x: x,\n    y: top\n  }, {\n    x: x,\n    y: bottom\n  }];\n}\n\nfunction useTransitToSubmenu(menu, htmlOnMouseEnter) {\n  var onMouseEnterRef = useLiveRef(htmlOnMouseEnter);\n  var enterPointRef = useRef(null);\n  var submenuTopPointRef = useRef(null);\n  var submenuBottomPointRef = useRef(null);\n  var previousClientX = useRef(0);\n  var previousClientY = useRef(0);\n  var assignSubmenuAnchorPoints = useCallback(function (event) {\n    if (!(menu === null || menu === void 0 ? void 0 : menu.children.length)) return;\n    submenuTopPointRef.current = null;\n    submenuBottomPointRef.current = null;\n    var visibleSubmenu = findVisibleSubmenu(menu.children);\n    if (!visibleSubmenu) return;\n\n    var _getSubmenuAnchorPoin = getSubmenuAnchorPoints(event, visibleSubmenu);\n\n    submenuTopPointRef.current = _getSubmenuAnchorPoin[0];\n    submenuBottomPointRef.current = _getSubmenuAnchorPoin[1];\n  }, [menu === null || menu === void 0 ? void 0 : menu.children]);\n  var isMouseInTransitToSubmenu = useCallback(function (event) {\n    var isMoving = previousClientX.current !== event.clientX || previousClientY.current !== event.clientY;\n\n    if (event.isTrusted && !isMoving) {\n      // Safari sometimes triggers mousemove without a mouse movement\n      return true;\n    }\n\n    var movementX = Math.abs(previousClientX.current - event.clientX);\n    previousClientX.current = event.clientX;\n    previousClientY.current = event.clientY;\n\n    var hasAnchorPoints = function hasAnchorPoints() {\n      return submenuTopPointRef.current && submenuBottomPointRef.current;\n    };\n\n    if (event.type === \"mouseleave\" && !hasAnchorPoints()) {\n      assignSubmenuAnchorPoints(event);\n    }\n\n    if (!hasAnchorPoints()) return false;\n    return movementX && enterPointRef.current && isPointInTriangle({\n      x: event.clientX,\n      y: event.clientY\n    }, enterPointRef.current, submenuTopPointRef.current, submenuBottomPointRef.current);\n  }, [assignSubmenuAnchorPoints]);\n  var onMouseEnter = useCallback(function (event) {\n    var _onMouseEnterRef$curr;\n\n    (_onMouseEnterRef$curr = onMouseEnterRef.current) === null || _onMouseEnterRef$curr === void 0 ? void 0 : _onMouseEnterRef$curr.call(onMouseEnterRef, event);\n    if (event.defaultPrevented) return;\n    if ((menu === null || menu === void 0 ? void 0 : menu.role) === \"menubar\") return;\n    enterPointRef.current = {\n      x: event.clientX,\n      y: event.clientY\n    };\n    assignSubmenuAnchorPoints(event);\n  }, [menu === null || menu === void 0 ? void 0 : menu.role, assignSubmenuAnchorPoints]);\n  return {\n    onMouseEnter: onMouseEnter,\n    isMouseInTransitToSubmenu: isMouseInTransitToSubmenu\n  };\n}\n\nfunction getMouseDestination(event) {\n  var relatedTarget = event.relatedTarget;\n\n  if ((relatedTarget === null || relatedTarget === void 0 ? void 0 : relatedTarget.nodeType) === Node.ELEMENT_NODE) {\n    return event.relatedTarget;\n  } // IE 11\n\n\n  return event.toElement || null;\n}\n\nfunction hoveringInside(event) {\n  var nextElement = getMouseDestination(event);\n  if (!nextElement) return false;\n  return contains(event.currentTarget, nextElement);\n}\n\nfunction hoveringExpandedMenu(event, children) {\n  if (!(children === null || children === void 0 ? void 0 : children.length)) return false;\n  var nextElement = getMouseDestination(event);\n  if (!nextElement) return false;\n  var visibleSubmenu = findVisibleSubmenu(children);\n  return visibleSubmenu && contains(visibleSubmenu, nextElement);\n}\n\nfunction hoveringAnotherMenuItem(event, items) {\n  var nextElement = getMouseDestination(event);\n  if (!nextElement) return false;\n  return items === null || items === void 0 ? void 0 : items.some(function (item) {\n    return item.ref.current && contains(item.ref.current, nextElement);\n  });\n}\n\nvar useMenuItem = createHook({\n  name: \"MenuItem\",\n  compose: useCompositeItem,\n  keys: MENU_ITEM_KEYS,\n  propsAreEqual: function propsAreEqual(prev, next) {\n    var prevPopoverStyles = prev.unstable_popoverStyles,\n        prevArrowStyles = prev.unstable_arrowStyles,\n        prevVisible = prev.visible,\n        prevProps = _objectWithoutPropertiesLoose(prev, [\"unstable_popoverStyles\", \"unstable_arrowStyles\", \"visible\"]);\n\n    var nextPopoverStyles = next.unstable_popoverStyles,\n        nextArrowStyles = next.unstable_arrowStyles,\n        nextVisible = next.visible,\n        nextProps = _objectWithoutPropertiesLoose(next, [\"unstable_popoverStyles\", \"unstable_arrowStyles\", \"visible\"]);\n\n    return useCompositeItem.unstable_propsAreEqual(prevProps, nextProps);\n  },\n  useProps: function useProps(options, _ref) {\n    var htmlOnMouseEnter = _ref.onMouseEnter,\n        htmlOnMouseMove = _ref.onMouseMove,\n        htmlOnMouseLeave = _ref.onMouseLeave,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\"]);\n\n    var menu = useContext(MenuContext);\n    var onMouseMoveRef = useLiveRef(htmlOnMouseMove);\n    var onMouseLeaveRef = useLiveRef(htmlOnMouseLeave);\n\n    var _useTransitToSubmenu = useTransitToSubmenu(menu, htmlOnMouseEnter),\n        onMouseEnter = _useTransitToSubmenu.onMouseEnter,\n        isMouseInTransitToSubmenu = _useTransitToSubmenu.isMouseInTransitToSubmenu;\n\n    var onMouseMove = useCallback(function (event) {\n      var _onMouseMoveRef$curre;\n\n      (_onMouseMoveRef$curre = onMouseMoveRef.current) === null || _onMouseMoveRef$curre === void 0 ? void 0 : _onMouseMoveRef$curre.call(onMouseMoveRef, event);\n      if (event.defaultPrevented) return;\n      if ((menu === null || menu === void 0 ? void 0 : menu.role) === \"menubar\") return;\n      if (isMouseInTransitToSubmenu(event)) return;\n      if (hasFocusWithin(event.currentTarget)) return;\n      event.currentTarget.focus();\n    }, []);\n    var onMouseLeave = useCallback(function (event) {\n      var _onMouseLeaveRef$curr;\n\n      (_onMouseLeaveRef$curr = onMouseLeaveRef.current) === null || _onMouseLeaveRef$curr === void 0 ? void 0 : _onMouseLeaveRef$curr.call(onMouseLeaveRef, event);\n      if (event.defaultPrevented) return;\n      if ((menu === null || menu === void 0 ? void 0 : menu.role) === \"menubar\") return;\n      if (hoveringInside(event)) return; // If this item is a menu disclosure and mouse is leaving it to focus\n      // its respective submenu, we don't want to do anything.\n\n      if (hoveringExpandedMenu(event, menu === null || menu === void 0 ? void 0 : menu.children)) return; // Move focus to menu after blurring\n\n      if (!hoveringAnotherMenuItem(event, options.items)) {\n        var _options$move;\n\n        if (isMouseInTransitToSubmenu(event)) return;\n        (_options$move = options.move) === null || _options$move === void 0 ? void 0 : _options$move.call(options, null);\n      }\n    }, [menu === null || menu === void 0 ? void 0 : menu.role, menu === null || menu === void 0 ? void 0 : menu.children, options.items, options.move]);\n    return _objectSpread2({\n      role: \"menuitem\",\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave\n    }, htmlProps);\n  }\n});\nvar MenuItem = createComponent({\n  as: \"button\",\n  memo: true,\n  useHook: useMenuItem\n});\nexport { MenuItem, useMenuItem };","map":null,"metadata":{},"sourceType":"module"}