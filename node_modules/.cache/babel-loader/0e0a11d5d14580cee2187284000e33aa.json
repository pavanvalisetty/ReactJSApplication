{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport { useWarning } from 'reakit-warning';\nimport 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport 'reakit-utils/useIsomorphicEffect';\nimport 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport { useCreateElement } from 'reakit-system/useCreateElement';\nimport 'reakit-utils/createOnKeyDown';\nimport 'reakit-utils/getDocument';\nimport 'reakit-utils/fireBlurEvent';\nimport 'reakit-utils/fireKeyboardEvent';\nimport 'reakit-utils/getNextActiveElementOnBlur';\nimport '../reverse-30eaa122.js';\nimport '../getCurrentId-5aa9849e.js';\nimport '../findEnabledItemById-8ddca752.js';\nimport '../__keys-6b7fda7f.js';\nimport { useComposite } from '../Composite/Composite.js';\nimport 'reakit-utils/removeItemFromArray';\nimport { u as useMenuContext } from '../MenuContext-6af6cf92.js';\nimport { closest } from 'reakit-utils/closest';\nimport { b as MENU_BAR_KEYS } from '../__keys-41337ef1.js';\n\nfunction useShortcuts(menuRef, _ref, timeout) {\n  var items = _ref.items,\n      move = _ref.move;\n\n  if (timeout === void 0) {\n    timeout = 500;\n  }\n\n  var _React$useState = useState(\"\"),\n      keys = _React$useState[0],\n      setKeys = _React$useState[1];\n\n  useEffect(function () {\n    if (!keys) return undefined;\n    var timeoutId = setTimeout(function () {\n      return setKeys(\"\");\n    }, timeout);\n    var stop = items.find(function (s) {\n      return Boolean(s.ref.current && s.ref.current.textContent && s.ref.current.textContent.toLowerCase().startsWith(keys));\n    });\n\n    if (stop) {\n      move(stop.id);\n    }\n\n    return function () {\n      return clearTimeout(timeoutId);\n    };\n  }, [keys, items, move, timeout]);\n  useEffect(function () {\n    var menu = menuRef.current;\n    if (!menu) return undefined;\n\n    var onKeyDown = function onKeyDown(event) {\n      var _target$getAttribute;\n\n      if (event.key.length > 1) return;\n      if (event.shiftKey) return;\n      if (event.metaKey) return;\n      if (event.ctrlKey) return;\n      if (event.altKey) return;\n      var target = event.target;\n      var role = (_target$getAttribute = target.getAttribute) === null || _target$getAttribute === void 0 ? void 0 : _target$getAttribute.call(target, \"role\");\n      var targetIsMenu = target === menu;\n      var targetIsMenuItem = role && role.indexOf(\"menuitem\") !== -1 && closest(target, \"[role=menu],[role=menubar]\") === menu;\n      if (!targetIsMenu && !targetIsMenuItem) return;\n\n      if (/^[a-z0-9_-]$/i.test(event.key)) {\n        event.stopPropagation();\n        event.preventDefault();\n        setKeys(function (k) {\n          return \"\" + k + event.key;\n        });\n      }\n    }; // https://github.com/facebook/react/issues/11387#issuecomment-524113945\n\n\n    menu.addEventListener(\"keydown\", onKeyDown);\n    return function () {\n      return menu.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [menuRef, setKeys]);\n}\n\nvar useMenuBar = createHook({\n  name: \"MenuBar\",\n  compose: useComposite,\n  keys: MENU_BAR_KEYS,\n  useProps: function useProps(options, _ref) {\n    var htmlRef = _ref.ref,\n        htmlWrapElement = _ref.wrapElement,\n        _ref$role = _ref.role,\n        role = _ref$role === void 0 ? \"menubar\" : _ref$role,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"ref\", \"wrapElement\", \"role\"]);\n\n    var ref = useRef(null);\n    var wrap = useMenuContext(ref, role, options);\n    useShortcuts(ref, options);\n    var wrapElement = useCallback(function (element) {\n      element = wrap(element);\n\n      if (htmlWrapElement) {\n        return htmlWrapElement(element);\n      }\n\n      return element;\n    }, [wrap, htmlWrapElement]);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      role: role,\n      \"aria-orientation\": options.orientation,\n      wrapElement: wrapElement\n    }, htmlProps);\n  }\n});\nvar MenuBar = createComponent({\n  as: \"div\",\n  useHook: useMenuBar,\n  useCreateElement: function useCreateElement$1(type, props, children) {\n    process.env.NODE_ENV !== \"production\" ? useWarning(!props[\"aria-label\"] && !props[\"aria-labelledby\"] && props.role !== \"menubar\", \"You should provide either `aria-label` or `aria-labelledby` props.\", \"See https://reakit.io/docs/menu\") : void 0;\n    return useCreateElement(type, props, children);\n  }\n});\nexport { MenuBar, useMenuBar };","map":null,"metadata":{},"sourceType":"module"}