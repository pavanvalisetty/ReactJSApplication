{"ast":null,"code":"/**\n * Returns an `onKeyDown` handler to be passed to a component.\n *\n * @param options\n */\nfunction createOnKeyDown(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      keyMap = _ref.keyMap,\n      onKey = _ref.onKey,\n      stopPropagation = _ref.stopPropagation,\n      onKeyDown = _ref.onKeyDown,\n      _ref$shouldKeyDown = _ref.shouldKeyDown,\n      shouldKeyDown = _ref$shouldKeyDown === void 0 ? function () {\n    return true;\n  } : _ref$shouldKeyDown,\n      _ref$preventDefault = _ref.preventDefault,\n      preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault;\n\n  return function (event) {\n    if (!keyMap) return;\n    var finalKeyMap = typeof keyMap === \"function\" ? keyMap(event) : keyMap;\n    var shouldPreventDefault = typeof preventDefault === \"function\" ? preventDefault(event) : preventDefault;\n    var shouldStopPropagation = typeof stopPropagation === \"function\" ? stopPropagation(event) : stopPropagation;\n\n    if (event.key in finalKeyMap) {\n      var action = finalKeyMap[event.key];\n\n      if (typeof action === \"function\" && shouldKeyDown(event)) {\n        if (shouldPreventDefault) event.preventDefault();\n        if (shouldStopPropagation) event.stopPropagation();\n        if (onKey) onKey(event);\n        action(event); // Prevent onKeyDown from being called twice for the same keys\n\n        return;\n      }\n    }\n\n    if (onKeyDown && \"current\" in onKeyDown) {\n      var _onKeyDown$current;\n\n      (_onKeyDown$current = onKeyDown.current) === null || _onKeyDown$current === void 0 ? void 0 : _onKeyDown$current.call(onKeyDown, event);\n    } else {\n      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n    }\n  };\n}\n\nexport { createOnKeyDown };","map":null,"metadata":{},"sourceType":"module"}