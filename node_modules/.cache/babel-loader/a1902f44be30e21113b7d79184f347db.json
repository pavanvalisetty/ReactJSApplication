{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport '../Box/Box.js';\nimport { useRef, useState, useCallback } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport 'reakit-utils/isButton';\nimport { warning } from 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport 'reakit-utils/isSelfTarget';\nimport { useIsomorphicEffect } from 'reakit-utils/useIsomorphicEffect';\nimport 'reakit-utils/hasFocusWithin';\nimport 'reakit-utils/isPortalEvent';\nimport 'reakit-utils/getActiveElement';\nimport 'reakit-utils/canUseDOM';\nimport 'reakit-utils/tabbable';\nimport '../Tabbable/Tabbable.js';\nimport '../Clickable/Clickable.js';\nimport '../Button/Button.js';\nimport '../__keys-e6a5cfbe.js';\nimport { b as DIALOG_DISCLOSURE_KEYS } from '../__keys-ed7b48af.js';\nimport { useDisclosure } from '../Disclosure/Disclosure.js';\nvar useDialogDisclosure = createHook({\n  name: \"DialogDisclosure\",\n  compose: useDisclosure,\n  keys: DIALOG_DISCLOSURE_KEYS,\n  useProps: function useProps(options, _ref) {\n    var htmlRef = _ref.ref,\n        htmlOnClick = _ref.onClick,\n        htmlProps = _objectWithoutPropertiesLoose(_ref, [\"ref\", \"onClick\"]);\n\n    var ref = useRef(null);\n    var onClickRef = useLiveRef(htmlOnClick);\n\n    var _React$useState = useState(false),\n        expanded = _React$useState[0],\n        setExpanded = _React$useState[1];\n\n    var disclosureRef = options.unstable_disclosureRef; // aria-expanded may be used for styling purposes, so we useLayoutEffect\n\n    useIsomorphicEffect(function () {\n      var element = ref.current;\n      process.env.NODE_ENV !== \"production\" ? warning(!element, \"Can't determine whether the element is the current disclosure because `ref` wasn't passed to the component\", \"See https://reakit.io/docs/dialog\") : void 0;\n\n      if (disclosureRef && !disclosureRef.current) {\n        disclosureRef.current = element;\n      }\n\n      var isCurrentDisclosure = !(disclosureRef === null || disclosureRef === void 0 ? void 0 : disclosureRef.current) || disclosureRef.current === element;\n      setExpanded(!!options.visible && isCurrentDisclosure);\n    }, [options.visible, disclosureRef]);\n    var onClick = useCallback(function (event) {\n      var _onClickRef$current;\n\n      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);\n      if (event.defaultPrevented) return;\n\n      if (disclosureRef) {\n        disclosureRef.current = event.currentTarget;\n      }\n    }, [disclosureRef]);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": expanded,\n      onClick: onClick\n    }, htmlProps);\n  }\n});\nvar DialogDisclosure = createComponent({\n  as: \"button\",\n  memo: true,\n  useHook: useDialogDisclosure\n});\nexport { DialogDisclosure, useDialogDisclosure };","map":null,"metadata":{},"sourceType":"module"}