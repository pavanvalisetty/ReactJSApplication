{"ast":null,"code":"import 'react';\nimport './SystemContext.js';\nimport './useToken.js';\nimport { useProps } from './useProps.js';\nimport { b as _createForOfIteratorHelperLoose } from './_rollupPluginBabelHelpers-0c84a174.js';\nimport { useOptions } from './useOptions.js';\nimport { shallowEqual } from 'reakit-utils/shallowEqual';\nimport { toArray } from 'reakit-utils/toArray';\n/**\n * Creates a React custom hook that will return component props.\n *\n * @example\n * import { createHook } from \"reakit-system\";\n *\n * const useA = createHook({\n *   name: \"A\",\n *   keys: [\"url\"], // custom props/options keys\n *   useProps(options, htmlProps) {\n *     return {\n *       ...htmlProps,\n *       href: options.url,\n *     };\n *   },\n * });\n *\n * function A({ url, ...htmlProps }) {\n *   const props = useA({ url }, htmlProps);\n *   return <a {...props} />;\n * }\n *\n * @param options\n */\n\nfunction createHook(options) {\n  var _options$useState, _composedHooks$;\n\n  var composedHooks = toArray(options.compose);\n\n  var __useOptions = function __useOptions(hookOptions, htmlProps) {\n    // Call the current hook's useOptions first\n    if (options.useOptions) {\n      hookOptions = options.useOptions(hookOptions, htmlProps);\n    } // If there's name, call useOptions from the system context\n\n\n    if (options.name) {\n      hookOptions = useOptions(options.name, hookOptions, htmlProps);\n    } // Run composed hooks useOptions\n\n\n    if (options.compose) {\n      for (var _iterator = _createForOfIteratorHelperLoose(composedHooks), _step; !(_step = _iterator()).done;) {\n        var hook = _step.value;\n        hookOptions = hook.__useOptions(hookOptions, htmlProps);\n      }\n    }\n\n    return hookOptions;\n  };\n\n  var useHook = function useHook(hookOptions, htmlProps, unstable_ignoreUseOptions) {\n    if (hookOptions === void 0) {\n      hookOptions = {};\n    }\n\n    if (htmlProps === void 0) {\n      htmlProps = {};\n    }\n\n    if (unstable_ignoreUseOptions === void 0) {\n      unstable_ignoreUseOptions = false;\n    } // This won't execute when useHook was called from within another useHook\n\n\n    if (!unstable_ignoreUseOptions) {\n      hookOptions = __useOptions(hookOptions, htmlProps);\n    } // Call the current hook's useProps\n\n\n    if (options.useProps) {\n      htmlProps = options.useProps(hookOptions, htmlProps);\n    } // If there's name, call useProps from the system context\n\n\n    if (options.name) {\n      htmlProps = useProps(options.name, hookOptions, htmlProps);\n    }\n\n    if (options.compose) {\n      if (options.useComposeOptions) {\n        hookOptions = options.useComposeOptions(hookOptions, htmlProps);\n      }\n\n      if (options.useComposeProps) {\n        htmlProps = options.useComposeProps(hookOptions, htmlProps);\n      } else {\n        for (var _iterator2 = _createForOfIteratorHelperLoose(composedHooks), _step2; !(_step2 = _iterator2()).done;) {\n          var hook = _step2.value;\n          htmlProps = hook(hookOptions, htmlProps, true);\n        }\n      }\n    } // Remove undefined values from htmlProps\n\n\n    var finalHTMLProps = {};\n    var definedHTMLProps = htmlProps || {};\n\n    for (var prop in definedHTMLProps) {\n      if (definedHTMLProps[prop] !== undefined) {\n        finalHTMLProps[prop] = definedHTMLProps[prop];\n      }\n    }\n\n    return finalHTMLProps;\n  };\n\n  useHook.__useOptions = __useOptions;\n  var composedKeys = composedHooks.reduce(function (keys, hook) {\n    keys.push.apply(keys, hook.__keys || []);\n    return keys;\n  }, []); // It's used by createComponent to split option props (keys) and html props\n\n  useHook.__keys = [].concat(composedKeys, ((_options$useState = options.useState) === null || _options$useState === void 0 ? void 0 : _options$useState.__keys) || [], options.keys || []);\n  useHook.unstable_propsAreEqual = options.propsAreEqual || ((_composedHooks$ = composedHooks[0]) === null || _composedHooks$ === void 0 ? void 0 : _composedHooks$.unstable_propsAreEqual) || shallowEqual;\n\n  if (process.env.NODE_ENV !== \"production\" && options.name) {\n    Object.defineProperty(useHook, \"name\", {\n      value: \"use\" + options.name\n    });\n  }\n\n  return useHook;\n}\n\nexport { createHook };","map":null,"metadata":{},"sourceType":"module"}