{"ast":null,"code":"import { a as _objectSpread2, _ as _objectWithoutPropertiesLoose } from '../_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport { createComponent } from 'reakit-system/createComponent';\nimport { createHook } from 'reakit-system/createHook';\nimport 'reakit-utils/shallowEqual';\nimport { useBox } from '../Box/Box.js';\nimport { useRef, useState, useCallback, useEffect } from 'react';\nimport { useForkRef } from 'reakit-utils/useForkRef';\nimport { isButton } from 'reakit-utils/isButton';\nimport { warning } from 'reakit-warning';\nimport { useLiveRef } from 'reakit-utils/useLiveRef';\nimport { useIsomorphicEffect } from 'reakit-utils/useIsomorphicEffect';\nimport { hasFocusWithin } from 'reakit-utils/hasFocusWithin';\nimport { isPortalEvent } from 'reakit-utils/isPortalEvent';\nimport { getActiveElement } from 'reakit-utils/getActiveElement';\nimport { canUseDOM } from 'reakit-utils/canUseDOM';\nimport { getClosestFocusable } from 'reakit-utils/tabbable'; // Automatically generated\n\nvar TABBABLE_KEYS = [\"disabled\", \"focusable\"];\n\nfunction isUA(string) {\n  if (!canUseDOM) return false;\n  return window.navigator.userAgent.indexOf(string) !== -1;\n}\n\nvar isSafariOrFirefoxOnMac = isUA(\"Mac\") && !isUA(\"Chrome\") && (isUA(\"Safari\") || isUA(\"Firefox\"));\n\nfunction focusIfNeeded(element) {\n  if (!hasFocusWithin(element)) {\n    element.focus();\n  }\n} // Safari and Firefox on MacOS don't focus on buttons on mouse down like other\n// browsers/platforms. Instead, they focus on the closest focusable ancestor\n// element, which is ultimately the body element. So we make sure to give focus\n// to the tabbable element on mouse down so it works consistently across\n// browsers.\n// istanbul ignore next\n\n\nfunction useFocusOnMouseDown() {\n  if (!isSafariOrFirefoxOnMac) return undefined;\n\n  var _React$useState = useState(null),\n      tabbable = _React$useState[0],\n      scheduleFocus = _React$useState[1];\n\n  useEffect(function () {\n    if (!tabbable) return;\n    focusIfNeeded(tabbable);\n    scheduleFocus(null);\n  }, [tabbable]);\n  var onMouseDown = useCallback(function (event) {\n    var element = event.currentTarget;\n    if (isPortalEvent(event)) return;\n    if (!isButton(element)) return;\n    var activeElement = getActiveElement(element);\n    if (!activeElement) return;\n    var activeElementIsBody = activeElement.tagName === \"BODY\";\n    var focusableAncestor = getClosestFocusable(element.parentElement);\n\n    if (activeElement === focusableAncestor || activeElementIsBody && !focusableAncestor) {\n      // When the active element is the focusable ancestor, it'll not emit\n      // focus/blur events. After all, it's already focused. So we can't\n      // listen to those events to focus this tabbable element.\n      // When the active element is body and there's no focusable ancestor,\n      // we also don't have any other event to listen to since body never\n      // emits focus/blur events on itself.\n      // In both of these cases, we have to schedule focus on this tabbable\n      // element.\n      scheduleFocus(element);\n    } else if (focusableAncestor) {\n      // Clicking (mouse down) on the tabbable element on Safari and Firefox\n      // on MacOS will fire focus on the focusable ancestor element if\n      // there's any and if it's not the current active element. So we wait\n      // for this event to happen before moving focus to this element.\n      // Instead of moving focus right away, we have to schedule it,\n      // otherwise it's gonna prevent drag events from happening.\n      var onFocus = function onFocus() {\n        return scheduleFocus(element);\n      };\n\n      focusableAncestor.addEventListener(\"focusin\", onFocus, {\n        once: true\n      });\n    } else {\n      // Finally, if there's no focsuable ancestor and there's another\n      // element with focus, we wait for that element to get blurred before\n      // focusing this one.\n      var onBlur = function onBlur() {\n        return focusIfNeeded(element);\n      };\n\n      activeElement.addEventListener(\"blur\", onBlur, {\n        once: true\n      });\n    }\n  }, []);\n  return onMouseDown;\n}\n\nfunction isNativeTabbable(element) {\n  return element.tagName === \"BUTTON\" || element.tagName === \"INPUT\" || element.tagName === \"SELECT\" || element.tagName === \"TEXTAREA\" || element.tagName === \"A\" || element.tagName === \"AUDIO\" || element.tagName === \"VIDEO\";\n}\n\nvar useTabbable = createHook({\n  name: \"Tabbable\",\n  compose: useBox,\n  keys: TABBABLE_KEYS,\n  useOptions: function useOptions(options, _ref) {\n    var disabled = _ref.disabled;\n    return _objectSpread2({\n      disabled: disabled\n    }, options);\n  },\n  useProps: function useProps(options, _ref2) {\n    var htmlRef = _ref2.ref,\n        htmlTabIndex = _ref2.tabIndex,\n        htmlOnClick = _ref2.onClick,\n        htmlOnMouseDown = _ref2.onMouseDown,\n        htmlStyle = _ref2.style,\n        htmlProps = _objectWithoutPropertiesLoose(_ref2, [\"ref\", \"tabIndex\", \"onClick\", \"onMouseDown\", \"style\"]);\n\n    var ref = useRef(null);\n    var onClickRef = useLiveRef(htmlOnClick);\n    var onMouseDownRef = useLiveRef(htmlOnMouseDown);\n    var trulyDisabled = options.disabled && !options.focusable;\n\n    var _React$useState2 = useState(true),\n        nativeTabbable = _React$useState2[0],\n        setNativeTabbable = _React$useState2[1];\n\n    var tabIndex = nativeTabbable ? htmlTabIndex : htmlTabIndex || 0;\n    var style = options.disabled ? _objectSpread2({\n      pointerEvents: \"none\"\n    }, htmlStyle) : htmlStyle;\n    var focusOnMouseDown = useFocusOnMouseDown();\n    useIsomorphicEffect(function () {\n      var tabbable = ref.current;\n\n      if (!tabbable) {\n        process.env.NODE_ENV !== \"production\" ? warning(true, \"Can't determine if the element is a native tabbable element because `ref` wasn't passed to the component.\", \"See https://reakit.io/docs/tabbable\") : void 0;\n        return;\n      }\n\n      if (!isNativeTabbable(tabbable)) {\n        setNativeTabbable(false);\n      }\n    }, []);\n    var onClick = useCallback(function (event) {\n      var _onClickRef$current;\n\n      if (options.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);\n    }, [options.disabled]);\n    var onMouseDown = useCallback(function (event) {\n      var _onMouseDownRef$curre;\n\n      if (options.disabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      (_onMouseDownRef$curre = onMouseDownRef.current) === null || _onMouseDownRef$curre === void 0 ? void 0 : _onMouseDownRef$curre.call(onMouseDownRef, event);\n      if (event.defaultPrevented) return;\n      focusOnMouseDown === null || focusOnMouseDown === void 0 ? void 0 : focusOnMouseDown(event);\n    }, [options.disabled, focusOnMouseDown]);\n    return _objectSpread2({\n      ref: useForkRef(ref, htmlRef),\n      style: style,\n      tabIndex: !trulyDisabled ? tabIndex : undefined,\n      disabled: trulyDisabled && nativeTabbable ? true : undefined,\n      \"aria-disabled\": options.disabled ? true : undefined,\n      onClick: onClick,\n      onMouseDown: onMouseDown\n    }, htmlProps);\n  }\n});\nvar Tabbable = createComponent({\n  as: \"div\",\n  useHook: useTabbable\n});\nexport { Tabbable, useTabbable };","map":null,"metadata":{},"sourceType":"module"}