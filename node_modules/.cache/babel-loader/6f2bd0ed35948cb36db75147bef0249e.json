{"ast":null,"code":"import { createContext, useContext, useState, createElement } from 'react';\nimport { useIsomorphicEffect } from 'reakit-utils/useIsomorphicEffect';\nimport { canUseDOM } from 'reakit-utils/canUseDOM';\nimport { createPortal } from 'react-dom';\n\nfunction getBodyElement() {\n  return canUseDOM ? document.body : null;\n}\n\nvar PortalContext =\n/*#__PURE__*/\ncreateContext(getBodyElement());\n\nfunction Portal(_ref) {\n  var children = _ref.children; // if it's a nested portal, context is the parent portal\n  // otherwise it's document.body\n  // https://github.com/reakit/reakit/issues/513\n\n  var context = useContext(PortalContext) || getBodyElement();\n\n  var _React$useState = useState(function () {\n    if (canUseDOM) {\n      var element = document.createElement(\"div\");\n      element.className = Portal.__className;\n      return element;\n    } // ssr\n\n\n    return null;\n  }),\n      hostNode = _React$useState[0];\n\n  useIsomorphicEffect(function () {\n    if (!hostNode || !context) return undefined;\n    context.appendChild(hostNode);\n    return function () {\n      context.removeChild(hostNode);\n    };\n  }, [hostNode, context]);\n\n  if (hostNode) {\n    return (\n      /*#__PURE__*/\n      createPortal(\n      /*#__PURE__*/\n      createElement(PortalContext.Provider, {\n        value: hostNode\n      }, children), hostNode)\n    );\n  } // ssr\n\n\n  return null;\n}\n\nPortal.__className = \"__reakit-portal\";\nPortal.__selector = \".\" + Portal.__className;\nexport { Portal, PortalContext };","map":null,"metadata":{},"sourceType":"module"}